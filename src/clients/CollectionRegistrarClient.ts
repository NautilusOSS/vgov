/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_update(uint64,byte[32],uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_ownerOf(uint256)address": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "expiration(uint256)uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setResolver(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_length()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "check_name(byte[32])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register(byte[32],address,uint256)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(address,byte[32],string)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "is_expired(uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reclaim(byte[58])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reclaimExpiredName(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_cost_multiplier(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_base_cost(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_price(byte[32],uint256)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "killApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "deleteNFTData(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteNFTOperators(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteNFTIndex(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteHolderData(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteBox(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_grace_period(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_treasury(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "nop()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_transferFrom(address,address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_payment_token(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_registry(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_root_node(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenURI(uint256)byte[256]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_approve(address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_getApproved(uint256)address": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_isApprovedForAll(address,address)bool": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_balanceOf(address)uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_totalSupply()uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenByIndex(uint256)uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "supportsInterface(byte[4])bool": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5Db2xsZWN0aW9uUmVnaXN0cmFyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQzMjEKICAgIC8vIGNsYXNzIENvbGxlY3Rpb25SZWdpc3RyYXIoQVJDNzJUb2tlbiwgVXBncmFkZWFibGUsIFN0YWtlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 8,
      "num_uints": 9
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "base_cost": {
          "type": "bytes",
          "key": "base_cost"
        },
        "base_period": {
          "type": "uint64",
          "key": "base_period"
        },
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "cost_multiplier": {
          "type": "bytes",
          "key": "cost_multiplier"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "grace_period": {
          "type": "uint64",
          "key": "grace_period"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "payment_token": {
          "type": "uint64",
          "key": "payment_token"
        },
        "registry": {
          "type": "uint64",
          "key": "registry"
        },
        "renewal_base_fee": {
          "type": "uint64",
          "key": "renewal_base_fee"
        },
        "root_node": {
          "type": "bytes",
          "key": "root_node"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "totalSupply": {
          "type": "bytes",
          "key": "totalSupply"
        },
        "treasury": {
          "type": "bytes",
          "key": "treasury"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "CollectionRegistrar",
    "methods": [
      {
        "name": "post_update",
        "args": [
          {
            "type": "uint64",
            "name": "registry"
          },
          {
            "type": "byte[32]",
            "name": "root_node"
          },
          {
            "type": "uint64",
            "name": "payment_token"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_ownerOf",
        "args": [
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "address"
        },
        "desc": "Returns the address of the current owner of the NFT with the given tokenId"
      },
      {
        "name": "expiration",
        "args": [
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "setResolver",
        "args": [
          {
            "type": "uint64",
            "name": "resolver"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_length",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "check_name",
        "args": [
          {
            "type": "byte[32]",
            "name": "name"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        },
        "desc": "Check if a name matches transaction sender"
      },
      {
        "name": "register",
        "args": [
          {
            "type": "byte[32]",
            "name": "name"
          },
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "uint256",
            "name": "duration"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        },
        "desc": "Register a new name\narguments:     name: name     owner: owner     duration: duration returns:     node: node"
      },
      {
        "name": "mint",
        "args": [
          {
            "type": "address",
            "name": "to"
          },
          {
            "type": "byte[32]",
            "name": "nodeId"
          },
          {
            "type": "string",
            "name": "nodeName"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint256"
        },
        "desc": "Mint a new NFT\narguments:     to: address     nodeId: node     nodeName: label     duration: duration returns:     tokenId: tokenId"
      },
      {
        "name": "is_expired",
        "args": [
          {
            "type": "uint256",
            "name": "token_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        },
        "desc": "Check if a name has expired\narguments:     token_id: tokenId returns:     expired: bool"
      },
      {
        "name": "reclaim",
        "args": [
          {
            "type": "byte[58]",
            "name": "name"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Sync the name with the registry (external)\narguments:     name: name returns:     None"
      },
      {
        "name": "reclaimExpiredName",
        "args": [
          {
            "type": "byte[32]",
            "name": "nameHash"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Reclaim an expired name"
      },
      {
        "name": "set_cost_multiplier",
        "args": [
          {
            "type": "uint256",
            "name": "cost_multiplier"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set cost multiplier for registration/renewal"
      },
      {
        "name": "set_base_cost",
        "args": [
          {
            "type": "uint256",
            "name": "base_cost"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set base cost for registration/renewal\nsets the number of AUs in the smallest unit of cost ex) 1 USDC = 1000000 AUs"
      },
      {
        "name": "get_price",
        "args": [
          {
            "type": "byte[32]",
            "name": "name"
          },
          {
            "type": "uint256",
            "name": "duration"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Calculate total price for registration/renewal"
      },
      {
        "name": "killApplication",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Kill contract"
      },
      {
        "name": "deleteNFTData",
        "args": [
          {
            "type": "uint256",
            "name": "token_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteNFTOperators",
        "args": [
          {
            "type": "uint256",
            "name": "label"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteNFTIndex",
        "args": [
          {
            "type": "uint256",
            "name": "index"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteHolderData",
        "args": [
          {
            "type": "address",
            "name": "holder"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteBox",
        "args": [
          {
            "type": "byte[]",
            "name": "key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_grace_period",
        "args": [
          {
            "type": "uint64",
            "name": "period"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set grace period for expired names"
      },
      {
        "name": "set_treasury",
        "args": [
          {
            "type": "address",
            "name": "treasury",
            "desc": "The new treasury address to receive fees"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the treasury address that receives registration fees"
      },
      {
        "name": "nop",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "No operation"
      },
      {
        "name": "arc72_transferFrom",
        "args": [
          {
            "type": "address",
            "name": "from_"
          },
          {
            "type": "address",
            "name": "to"
          },
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfers ownership of an NFT"
      },
      {
        "name": "set_payment_token",
        "args": [
          {
            "type": "uint64",
            "name": "token"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the payment token"
      },
      {
        "name": "set_registry",
        "args": [
          {
            "type": "uint64",
            "name": "registry"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the registry"
      },
      {
        "name": "set_root_node",
        "args": [
          {
            "type": "byte[32]",
            "name": "root_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the root node"
      },
      {
        "name": "arc72_tokenURI",
        "args": [
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "byte[256]"
        }
      },
      {
        "name": "arc72_approve",
        "args": [
          {
            "type": "address",
            "name": "approved"
          },
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_setApprovalForAll",
        "args": [
          {
            "type": "address",
            "name": "operator"
          },
          {
            "type": "bool",
            "name": "approved"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_getApproved",
        "args": [
          {
            "type": "uint256",
            "name": "tokenId"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "arc72_isApprovedForAll",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "operator"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc72_balanceOf",
        "args": [
          {
            "type": "address",
            "name": "owner"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc72_totalSupply",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc72_tokenByIndex",
        "args": [
          {
            "type": "uint256",
            "name": "index"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "supportsInterface",
        "args": [
          {
            "type": "byte[4]",
            "name": "interface_id"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CollectionRegistrar smart contract.
 */
export type CollectionRegistrar = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_update(uint64,byte[32],uint64)void' | 'post_update', {
      argsObj: {
        registry: bigint | number
        rootNode: Uint8Array
        paymentToken: bigint | number
      }
      argsTuple: [registry: bigint | number, rootNode: Uint8Array, paymentToken: bigint | number]
      returns: void
    }>
    & Record<'arc72_ownerOf(uint256)address' | 'arc72_ownerOf', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: string
    }>
    & Record<'expiration(uint256)uint256' | 'expiration', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: bigint
    }>
    & Record<'setResolver(uint64)void' | 'setResolver', {
      argsObj: {
        resolver: bigint | number
      }
      argsTuple: [resolver: bigint | number]
      returns: void
    }>
    & Record<'get_length()uint64' | 'get_length', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'check_name(byte[32])bool' | 'check_name', {
      argsObj: {
        name: Uint8Array
      }
      argsTuple: [name: Uint8Array]
      returns: boolean
    }>
    & Record<'register(byte[32],address,uint256)byte[32]' | 'register', {
      argsObj: {
        name: Uint8Array
        owner: string
        duration: bigint | number
      }
      argsTuple: [name: Uint8Array, owner: string, duration: bigint | number]
      returns: Uint8Array
    }>
    & Record<'mint(address,byte[32],string)uint256' | 'mint', {
      argsObj: {
        to: string
        nodeId: Uint8Array
        nodeName: string
      }
      argsTuple: [to: string, nodeId: Uint8Array, nodeName: string]
      returns: bigint
    }>
    & Record<'is_expired(uint256)bool' | 'is_expired', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: boolean
    }>
    & Record<'reclaim(byte[58])void' | 'reclaim', {
      argsObj: {
        name: Uint8Array
      }
      argsTuple: [name: Uint8Array]
      returns: void
    }>
    & Record<'reclaimExpiredName(byte[32])void' | 'reclaimExpiredName', {
      argsObj: {
        nameHash: Uint8Array
      }
      argsTuple: [nameHash: Uint8Array]
      returns: void
    }>
    & Record<'set_cost_multiplier(uint256)void' | 'set_cost_multiplier', {
      argsObj: {
        costMultiplier: bigint | number
      }
      argsTuple: [costMultiplier: bigint | number]
      returns: void
    }>
    & Record<'set_base_cost(uint256)void' | 'set_base_cost', {
      argsObj: {
        baseCost: bigint | number
      }
      argsTuple: [baseCost: bigint | number]
      returns: void
    }>
    & Record<'get_price(byte[32],uint256)uint64' | 'get_price', {
      argsObj: {
        name: Uint8Array
        duration: bigint | number
      }
      argsTuple: [name: Uint8Array, duration: bigint | number]
      returns: bigint
    }>
    & Record<'killApplication()void' | 'killApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteNFTData(uint256)void' | 'deleteNFTData', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: void
    }>
    & Record<'deleteNFTOperators(uint256)void' | 'deleteNFTOperators', {
      argsObj: {
        label: bigint | number
      }
      argsTuple: [label: bigint | number]
      returns: void
    }>
    & Record<'deleteNFTIndex(uint256)void' | 'deleteNFTIndex', {
      argsObj: {
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      returns: void
    }>
    & Record<'deleteHolderData(address)void' | 'deleteHolderData', {
      argsObj: {
        holder: string
      }
      argsTuple: [holder: string]
      returns: void
    }>
    & Record<'deleteBox(byte[])void' | 'deleteBox', {
      argsObj: {
        key: Uint8Array
      }
      argsTuple: [key: Uint8Array]
      returns: void
    }>
    & Record<'set_grace_period(uint64)void' | 'set_grace_period', {
      argsObj: {
        period: bigint | number
      }
      argsTuple: [period: bigint | number]
      returns: void
    }>
    & Record<'set_treasury(address)void' | 'set_treasury', {
      argsObj: {
        /**
         * The new treasury address to receive fees
         */
        treasury: string
      }
      argsTuple: [treasury: string]
      returns: void
    }>
    & Record<'nop()void' | 'nop', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'arc72_transferFrom(address,address,uint256)void' | 'arc72_transferFrom', {
      argsObj: {
        from: string
        to: string
        tokenId: bigint | number
      }
      argsTuple: [from: string, to: string, tokenId: bigint | number]
      returns: void
    }>
    & Record<'set_payment_token(uint64)void' | 'set_payment_token', {
      argsObj: {
        token: bigint | number
      }
      argsTuple: [token: bigint | number]
      returns: void
    }>
    & Record<'set_registry(uint64)void' | 'set_registry', {
      argsObj: {
        registry: bigint | number
      }
      argsTuple: [registry: bigint | number]
      returns: void
    }>
    & Record<'set_root_node(byte[32])void' | 'set_root_node', {
      argsObj: {
        rootNode: Uint8Array
      }
      argsTuple: [rootNode: Uint8Array]
      returns: void
    }>
    & Record<'arc72_tokenURI(uint256)byte[256]' | 'arc72_tokenURI', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: Uint8Array
    }>
    & Record<'arc72_approve(address,uint256)void' | 'arc72_approve', {
      argsObj: {
        approved: string
        tokenId: bigint | number
      }
      argsTuple: [approved: string, tokenId: bigint | number]
      returns: void
    }>
    & Record<'arc72_setApprovalForAll(address,bool)void' | 'arc72_setApprovalForAll', {
      argsObj: {
        operator: string
        approved: boolean
      }
      argsTuple: [operator: string, approved: boolean]
      returns: void
    }>
    & Record<'arc72_getApproved(uint256)address' | 'arc72_getApproved', {
      argsObj: {
        tokenId: bigint | number
      }
      argsTuple: [tokenId: bigint | number]
      returns: string
    }>
    & Record<'arc72_isApprovedForAll(address,address)bool' | 'arc72_isApprovedForAll', {
      argsObj: {
        owner: string
        operator: string
      }
      argsTuple: [owner: string, operator: string]
      returns: boolean
    }>
    & Record<'arc72_balanceOf(address)uint256' | 'arc72_balanceOf', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: bigint
    }>
    & Record<'arc72_totalSupply()uint256' | 'arc72_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'arc72_tokenByIndex(uint256)uint256' | 'arc72_tokenByIndex', {
      argsObj: {
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      returns: bigint
    }>
    & Record<'supportsInterface(byte[4])bool' | 'supportsInterface', {
      argsObj: {
        interfaceId: Uint8Array
      }
      argsTuple: [interfaceId: Uint8Array]
      returns: boolean
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      baseCost?: BinaryState
      basePeriod?: IntegerState
      contractVersion?: IntegerState
      costMultiplier?: BinaryState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      gracePeriod?: IntegerState
      owner?: BinaryState
      paymentToken?: IntegerState
      registry?: IntegerState
      renewalBaseFee?: IntegerState
      rootNode?: BinaryState
      stakeable?: IntegerState
      totalSupply?: BinaryState
      treasury?: BinaryState
      updatable?: IntegerState
      upgrader?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CollectionRegistrarSig = keyof CollectionRegistrar['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CollectionRegistrarSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CollectionRegistrar smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CollectionRegistrarSig> = CollectionRegistrar['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CollectionRegistrar smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CollectionRegistrarSig> = CollectionRegistrar['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CollectionRegistrarCreateCalls = (typeof CollectionRegistrarCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CollectionRegistrarCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type CollectionRegistrarUpdateCalls = (typeof CollectionRegistrarCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type CollectionRegistrarUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type CollectionRegistrarDeleteCalls = (typeof CollectionRegistrarCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type CollectionRegistrarDeleteCallParams =
  | TypedCallParams<'killApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type CollectionRegistrarDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CollectionRegistrarCreateCalls) => CollectionRegistrarCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: CollectionRegistrarUpdateCalls) => CollectionRegistrarUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: CollectionRegistrarDeleteCalls) => CollectionRegistrarDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CollectionRegistrarCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CollectionRegistrar smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the CollectionRegistrar smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the CollectionRegistrar smart contract using the killApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'killApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_update(uint64,byte[32],uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpdate(args: MethodArgs<'post_update(uint64,byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_update(uint64,byte[32],uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.registry, args.rootNode, args.paymentToken],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_ownerOf(uint256)address ABI method
   *
   * Returns the address of the current owner of the NFT with the given tokenId
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint256)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_ownerOf(uint256)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the expiration(uint256)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static expiration(args: MethodArgs<'expiration(uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'expiration(uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setResolver(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setResolver(args: MethodArgs<'setResolver(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setResolver(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.resolver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_length()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLength(args: MethodArgs<'get_length()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_length()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the check_name(byte[32])bool ABI method
   *
   * Check if a name matches transaction sender
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkName(args: MethodArgs<'check_name(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'check_name(byte[32])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register(byte[32],address,uint256)byte[32] ABI method
   *
   * Register a new name
arguments:     name: name     owner: owner     duration: duration returns:     node: node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(byte[32],address,uint256)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(byte[32],address,uint256)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.owner, args.duration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the mint(address,byte[32],string)uint256 ABI method
   *
   * Mint a new NFT
arguments:     to: address     nodeId: node     nodeName: label     duration: duration returns:     tokenId: tokenId
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint(address,byte[32],string)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint(address,byte[32],string)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.nodeId, args.nodeName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the is_expired(uint256)bool ABI method
   *
   * Check if a name has expired
arguments:     token_id: tokenId returns:     expired: bool
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isExpired(args: MethodArgs<'is_expired(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'is_expired(uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reclaim(byte[58])void ABI method
   *
   * Sync the name with the registry (external)
arguments:     name: name returns:     None
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reclaim(args: MethodArgs<'reclaim(byte[58])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reclaim(byte[58])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reclaimExpiredName(byte[32])void ABI method
   *
   * Reclaim an expired name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reclaimExpiredName(args: MethodArgs<'reclaimExpiredName(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reclaimExpiredName(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.nameHash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_cost_multiplier(uint256)void ABI method
   *
   * Set cost multiplier for registration/renewal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setCostMultiplier(args: MethodArgs<'set_cost_multiplier(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_cost_multiplier(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.costMultiplier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_base_cost(uint256)void ABI method
   *
   * Set base cost for registration/renewal
sets the number of AUs in the smallest unit of cost ex) 1 USDC = 1000000 AUs
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setBaseCost(args: MethodArgs<'set_base_cost(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_base_cost(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.baseCost],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_price(byte[32],uint256)uint64 ABI method
   *
   * Calculate total price for registration/renewal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPrice(args: MethodArgs<'get_price(byte[32],uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_price(byte[32],uint256)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.duration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteNFTData(uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteNftData(args: MethodArgs<'deleteNFTData(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteNFTData(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteNFTOperators(uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteNftOperators(args: MethodArgs<'deleteNFTOperators(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteNFTOperators(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.label],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteNFTIndex(uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteNftIndex(args: MethodArgs<'deleteNFTIndex(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteNFTIndex(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteHolderData(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteHolderData(args: MethodArgs<'deleteHolderData(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteHolderData(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.holder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteBox(byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteBox(byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_grace_period(uint64)void ABI method
   *
   * Set grace period for expired names
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setGracePeriod(args: MethodArgs<'set_grace_period(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_grace_period(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.period],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_treasury(address)void ABI method
   *
   * Set the treasury address that receives registration fees
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTreasury(args: MethodArgs<'set_treasury(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_treasury(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.treasury],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the nop()void ABI method
   *
   * No operation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static nop(args: MethodArgs<'nop()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'nop()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_transferFrom(address,address,uint256)void ABI method
   *
   * Transfers ownership of an NFT
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_transferFrom(address,address,uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.from, args.to, args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_payment_token(uint64)void ABI method
   *
   * Set the payment token
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPaymentToken(args: MethodArgs<'set_payment_token(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_payment_token(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.token],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_registry(uint64)void ABI method
   *
   * Set the registry
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRegistry(args: MethodArgs<'set_registry(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_registry(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.registry],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_root_node(byte[32])void ABI method
   *
   * Set the root node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRootNode(args: MethodArgs<'set_root_node(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_root_node(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rootNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_tokenURI(uint256)byte[256] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint256)byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_tokenURI(uint256)byte[256]' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_approve(address,uint256)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72Approve(args: MethodArgs<'arc72_approve(address,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_approve(address,uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approved, args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_setApprovalForAll(address,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_setApprovalForAll(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.operator, args.approved],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_getApproved(uint256)address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint256)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_getApproved(uint256)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.tokenId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_isApprovedForAll(address,address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_isApprovedForAll(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.operator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_balanceOf(address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_balanceOf(address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_totalSupply()uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_totalSupply()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc72_tokenByIndex(uint256)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc72TokenByIndex(args: MethodArgs<'arc72_tokenByIndex(uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc72_tokenByIndex(uint256)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the supportsInterface(byte[4])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'supportsInterface(byte[4])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.interfaceId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CollectionRegistrar smart contract
 */
export class CollectionRegistrarClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CollectionRegistrarClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CollectionRegistrar['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CollectionRegistrar smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CollectionRegistrarDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CollectionRegistrarCallFactory.create)
    const updateArgs = params.updateCall?.(CollectionRegistrarCallFactory.update)
    const deleteArgs = params.deleteCall?.(CollectionRegistrarCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CollectionRegistrar smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the CollectionRegistrar smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the CollectionRegistrar smart contract using the killApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'killApplication()void'>>(await $this.appClient.delete(CollectionRegistrarCallFactory.delete.killApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CollectionRegistrar smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_update(uint64,byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpdate(args: MethodArgs<'post_update(uint64,byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.postUpdate(args, params))
  }

  /**
   * Calls the arc72_ownerOf(uint256)address ABI method.
   *
   * Returns the address of the current owner of the NFT with the given tokenId
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint256)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72OwnerOf(args, params))
  }

  /**
   * Calls the expiration(uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public expiration(args: MethodArgs<'expiration(uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.expiration(args, params))
  }

  /**
   * Calls the setResolver(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setResolver(args: MethodArgs<'setResolver(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setResolver(args, params))
  }

  /**
   * Calls the get_length()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLength(args: MethodArgs<'get_length()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.getLength(args, params))
  }

  /**
   * Calls the check_name(byte[32])bool ABI method.
   *
   * Check if a name matches transaction sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkName(args: MethodArgs<'check_name(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.checkName(args, params))
  }

  /**
   * Calls the register(byte[32],address,uint256)byte[32] ABI method.
   *
   * Register a new name
arguments:     name: name     owner: owner     duration: duration returns:     node: node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(byte[32],address,uint256)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.register(args, params))
  }

  /**
   * Calls the mint(address,byte[32],string)uint256 ABI method.
   *
   * Mint a new NFT
arguments:     to: address     nodeId: node     nodeName: label     duration: duration returns:     tokenId: tokenId
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint(address,byte[32],string)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.mint(args, params))
  }

  /**
   * Calls the is_expired(uint256)bool ABI method.
   *
   * Check if a name has expired
arguments:     token_id: tokenId returns:     expired: bool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public isExpired(args: MethodArgs<'is_expired(uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.isExpired(args, params))
  }

  /**
   * Calls the reclaim(byte[58])void ABI method.
   *
   * Sync the name with the registry (external)
arguments:     name: name returns:     None
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reclaim(args: MethodArgs<'reclaim(byte[58])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.reclaim(args, params))
  }

  /**
   * Calls the reclaimExpiredName(byte[32])void ABI method.
   *
   * Reclaim an expired name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reclaimExpiredName(args: MethodArgs<'reclaimExpiredName(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.reclaimExpiredName(args, params))
  }

  /**
   * Calls the set_cost_multiplier(uint256)void ABI method.
   *
   * Set cost multiplier for registration/renewal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setCostMultiplier(args: MethodArgs<'set_cost_multiplier(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setCostMultiplier(args, params))
  }

  /**
   * Calls the set_base_cost(uint256)void ABI method.
   *
   * Set base cost for registration/renewal
sets the number of AUs in the smallest unit of cost ex) 1 USDC = 1000000 AUs
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setBaseCost(args: MethodArgs<'set_base_cost(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setBaseCost(args, params))
  }

  /**
   * Calls the get_price(byte[32],uint256)uint64 ABI method.
   *
   * Calculate total price for registration/renewal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPrice(args: MethodArgs<'get_price(byte[32],uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.getPrice(args, params))
  }

  /**
   * Calls the deleteNFTData(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteNftData(args: MethodArgs<'deleteNFTData(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.deleteNftData(args, params))
  }

  /**
   * Calls the deleteNFTOperators(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteNftOperators(args: MethodArgs<'deleteNFTOperators(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.deleteNftOperators(args, params))
  }

  /**
   * Calls the deleteNFTIndex(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteNftIndex(args: MethodArgs<'deleteNFTIndex(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.deleteNftIndex(args, params))
  }

  /**
   * Calls the deleteHolderData(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteHolderData(args: MethodArgs<'deleteHolderData(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.deleteHolderData(args, params))
  }

  /**
   * Calls the deleteBox(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.deleteBox(args, params))
  }

  /**
   * Calls the set_grace_period(uint64)void ABI method.
   *
   * Set grace period for expired names
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setGracePeriod(args: MethodArgs<'set_grace_period(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setGracePeriod(args, params))
  }

  /**
   * Calls the set_treasury(address)void ABI method.
   *
   * Set the treasury address that receives registration fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setTreasury(args: MethodArgs<'set_treasury(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setTreasury(args, params))
  }

  /**
   * Calls the nop()void ABI method.
   *
   * No operation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public nop(args: MethodArgs<'nop()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.nop(args, params))
  }

  /**
   * Calls the arc72_transferFrom(address,address,uint256)void ABI method.
   *
   * Transfers ownership of an NFT
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72TransferFrom(args, params))
  }

  /**
   * Calls the set_payment_token(uint64)void ABI method.
   *
   * Set the payment token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPaymentToken(args: MethodArgs<'set_payment_token(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setPaymentToken(args, params))
  }

  /**
   * Calls the set_registry(uint64)void ABI method.
   *
   * Set the registry
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRegistry(args: MethodArgs<'set_registry(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setRegistry(args, params))
  }

  /**
   * Calls the set_root_node(byte[32])void ABI method.
   *
   * Set the root node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRootNode(args: MethodArgs<'set_root_node(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setRootNode(args, params))
  }

  /**
   * Calls the arc72_tokenURI(uint256)byte[256] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint256)byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72TokenUri(args, params))
  }

  /**
   * Calls the arc72_approve(address,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72Approve(args: MethodArgs<'arc72_approve(address,uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72Approve(args, params))
  }

  /**
   * Calls the arc72_setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72SetApprovalForAll(args, params))
  }

  /**
   * Calls the arc72_getApproved(uint256)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint256)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72GetApproved(args, params))
  }

  /**
   * Calls the arc72_isApprovedForAll(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72IsApprovedForAll(args, params))
  }

  /**
   * Calls the arc72_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72BalanceOf(args, params))
  }

  /**
   * Calls the arc72_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72TotalSupply(args, params))
  }

  /**
   * Calls the arc72_tokenByIndex(uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc72TokenByIndex(args: MethodArgs<'arc72_tokenByIndex(uint256)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.arc72TokenByIndex(args, params))
  }

  /**
   * Calls the supportsInterface(byte[4])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.supportsInterface(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.participate(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CollectionRegistrarCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CollectionRegistrar['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get baseCost() {
        return CollectionRegistrarClient.getBinaryState(state, 'base_cost')
      },
      get basePeriod() {
        return CollectionRegistrarClient.getIntegerState(state, 'base_period')
      },
      get contractVersion() {
        return CollectionRegistrarClient.getIntegerState(state, 'contract_version')
      },
      get costMultiplier() {
        return CollectionRegistrarClient.getBinaryState(state, 'cost_multiplier')
      },
      get delegate() {
        return CollectionRegistrarClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return CollectionRegistrarClient.getIntegerState(state, 'deployment_version')
      },
      get gracePeriod() {
        return CollectionRegistrarClient.getIntegerState(state, 'grace_period')
      },
      get owner() {
        return CollectionRegistrarClient.getBinaryState(state, 'owner')
      },
      get paymentToken() {
        return CollectionRegistrarClient.getIntegerState(state, 'payment_token')
      },
      get registry() {
        return CollectionRegistrarClient.getIntegerState(state, 'registry')
      },
      get renewalBaseFee() {
        return CollectionRegistrarClient.getIntegerState(state, 'renewal_base_fee')
      },
      get rootNode() {
        return CollectionRegistrarClient.getBinaryState(state, 'root_node')
      },
      get stakeable() {
        return CollectionRegistrarClient.getIntegerState(state, 'stakeable')
      },
      get totalSupply() {
        return CollectionRegistrarClient.getBinaryState(state, 'totalSupply')
      },
      get treasury() {
        return CollectionRegistrarClient.getBinaryState(state, 'treasury')
      },
      get updatable() {
        return CollectionRegistrarClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return CollectionRegistrarClient.getBinaryState(state, 'upgrader')
      },
    }
  }

  public compose(): CollectionRegistrarComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpdate(args: MethodArgs<'post_update(uint64,byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint256)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72OwnerOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      expiration(args: MethodArgs<'expiration(uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.expiration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setResolver(args: MethodArgs<'setResolver(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setResolver(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLength(args: MethodArgs<'get_length()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLength(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkName(args: MethodArgs<'check_name(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      register(args: MethodArgs<'register(byte[32],address,uint256)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      mint(args: MethodArgs<'mint(address,byte[32],string)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      isExpired(args: MethodArgs<'is_expired(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isExpired(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reclaim(args: MethodArgs<'reclaim(byte[58])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reclaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reclaimExpiredName(args: MethodArgs<'reclaimExpiredName(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reclaimExpiredName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setCostMultiplier(args: MethodArgs<'set_cost_multiplier(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setCostMultiplier(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setBaseCost(args: MethodArgs<'set_base_cost(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setBaseCost(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPrice(args: MethodArgs<'get_price(byte[32],uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteNftData(args: MethodArgs<'deleteNFTData(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteNftData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteNftOperators(args: MethodArgs<'deleteNFTOperators(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteNftOperators(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteNftIndex(args: MethodArgs<'deleteNFTIndex(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteNftIndex(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteHolderData(args: MethodArgs<'deleteHolderData(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteHolderData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setGracePeriod(args: MethodArgs<'set_grace_period(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setGracePeriod(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTreasury(args: MethodArgs<'set_treasury(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTreasury(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      nop(args: MethodArgs<'nop()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.nop(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setPaymentToken(args: MethodArgs<'set_payment_token(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPaymentToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRegistry(args: MethodArgs<'set_registry(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRegistry(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRootNode(args: MethodArgs<'set_root_node(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRootNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint256)byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TokenUri(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72Approve(args: MethodArgs<'arc72_approve(address,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72SetApprovalForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint256)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72GetApproved(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72IsApprovedForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc72TokenByIndex(args: MethodArgs<'arc72_tokenByIndex(uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc72TokenByIndex(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.supportsInterface(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.killApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CollectionRegistrarComposer
  }
}
export type CollectionRegistrarComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_update(uint64,byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpdate(args: MethodArgs<'post_update(uint64,byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'post_update(uint64,byte[32],uint64)void'>]>

  /**
   * Calls the arc72_ownerOf(uint256)address ABI method.
   *
   * Returns the address of the current owner of the NFT with the given tokenId
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72OwnerOf(args: MethodArgs<'arc72_ownerOf(uint256)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_ownerOf(uint256)address'>]>

  /**
   * Calls the expiration(uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  expiration(args: MethodArgs<'expiration(uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'expiration(uint256)uint256'>]>

  /**
   * Calls the setResolver(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setResolver(args: MethodArgs<'setResolver(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'setResolver(uint64)void'>]>

  /**
   * Calls the get_length()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLength(args: MethodArgs<'get_length()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'get_length()uint64'>]>

  /**
   * Calls the check_name(byte[32])bool ABI method.
   *
   * Check if a name matches transaction sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkName(args: MethodArgs<'check_name(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'check_name(byte[32])bool'>]>

  /**
   * Calls the register(byte[32],address,uint256)byte[32] ABI method.
   *
   * Register a new name
arguments:     name: name     owner: owner     duration: duration returns:     node: node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(byte[32],address,uint256)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'register(byte[32],address,uint256)byte[32]'>]>

  /**
   * Calls the mint(address,byte[32],string)uint256 ABI method.
   *
   * Mint a new NFT
arguments:     to: address     nodeId: node     nodeName: label     duration: duration returns:     tokenId: tokenId
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint(address,byte[32],string)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'mint(address,byte[32],string)uint256'>]>

  /**
   * Calls the is_expired(uint256)bool ABI method.
   *
   * Check if a name has expired
arguments:     token_id: tokenId returns:     expired: bool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isExpired(args: MethodArgs<'is_expired(uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'is_expired(uint256)bool'>]>

  /**
   * Calls the reclaim(byte[58])void ABI method.
   *
   * Sync the name with the registry (external)
arguments:     name: name returns:     None
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaim(args: MethodArgs<'reclaim(byte[58])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'reclaim(byte[58])void'>]>

  /**
   * Calls the reclaimExpiredName(byte[32])void ABI method.
   *
   * Reclaim an expired name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaimExpiredName(args: MethodArgs<'reclaimExpiredName(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'reclaimExpiredName(byte[32])void'>]>

  /**
   * Calls the set_cost_multiplier(uint256)void ABI method.
   *
   * Set cost multiplier for registration/renewal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setCostMultiplier(args: MethodArgs<'set_cost_multiplier(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_cost_multiplier(uint256)void'>]>

  /**
   * Calls the set_base_cost(uint256)void ABI method.
   *
   * Set base cost for registration/renewal
sets the number of AUs in the smallest unit of cost ex) 1 USDC = 1000000 AUs
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setBaseCost(args: MethodArgs<'set_base_cost(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_base_cost(uint256)void'>]>

  /**
   * Calls the get_price(byte[32],uint256)uint64 ABI method.
   *
   * Calculate total price for registration/renewal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPrice(args: MethodArgs<'get_price(byte[32],uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'get_price(byte[32],uint256)uint64'>]>

  /**
   * Calls the deleteNFTData(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteNftData(args: MethodArgs<'deleteNFTData(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'deleteNFTData(uint256)void'>]>

  /**
   * Calls the deleteNFTOperators(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteNftOperators(args: MethodArgs<'deleteNFTOperators(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'deleteNFTOperators(uint256)void'>]>

  /**
   * Calls the deleteNFTIndex(uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteNftIndex(args: MethodArgs<'deleteNFTIndex(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'deleteNFTIndex(uint256)void'>]>

  /**
   * Calls the deleteHolderData(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteHolderData(args: MethodArgs<'deleteHolderData(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'deleteHolderData(address)void'>]>

  /**
   * Calls the deleteBox(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'deleteBox(byte[])void'>]>

  /**
   * Calls the set_grace_period(uint64)void ABI method.
   *
   * Set grace period for expired names
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGracePeriod(args: MethodArgs<'set_grace_period(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_grace_period(uint64)void'>]>

  /**
   * Calls the set_treasury(address)void ABI method.
   *
   * Set the treasury address that receives registration fees
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTreasury(args: MethodArgs<'set_treasury(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_treasury(address)void'>]>

  /**
   * Calls the nop()void ABI method.
   *
   * No operation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  nop(args: MethodArgs<'nop()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'nop()void'>]>

  /**
   * Calls the arc72_transferFrom(address,address,uint256)void ABI method.
   *
   * Transfers ownership of an NFT
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TransferFrom(args: MethodArgs<'arc72_transferFrom(address,address,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_transferFrom(address,address,uint256)void'>]>

  /**
   * Calls the set_payment_token(uint64)void ABI method.
   *
   * Set the payment token
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPaymentToken(args: MethodArgs<'set_payment_token(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_payment_token(uint64)void'>]>

  /**
   * Calls the set_registry(uint64)void ABI method.
   *
   * Set the registry
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRegistry(args: MethodArgs<'set_registry(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_registry(uint64)void'>]>

  /**
   * Calls the set_root_node(byte[32])void ABI method.
   *
   * Set the root node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRootNode(args: MethodArgs<'set_root_node(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_root_node(byte[32])void'>]>

  /**
   * Calls the arc72_tokenURI(uint256)byte[256] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TokenUri(args: MethodArgs<'arc72_tokenURI(uint256)byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_tokenURI(uint256)byte[256]'>]>

  /**
   * Calls the arc72_approve(address,uint256)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72Approve(args: MethodArgs<'arc72_approve(address,uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_approve(address,uint256)void'>]>

  /**
   * Calls the arc72_setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72SetApprovalForAll(args: MethodArgs<'arc72_setApprovalForAll(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_setApprovalForAll(address,bool)void'>]>

  /**
   * Calls the arc72_getApproved(uint256)address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72GetApproved(args: MethodArgs<'arc72_getApproved(uint256)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_getApproved(uint256)address'>]>

  /**
   * Calls the arc72_isApprovedForAll(address,address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72IsApprovedForAll(args: MethodArgs<'arc72_isApprovedForAll(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_isApprovedForAll(address,address)bool'>]>

  /**
   * Calls the arc72_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72BalanceOf(args: MethodArgs<'arc72_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_balanceOf(address)uint256'>]>

  /**
   * Calls the arc72_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TotalSupply(args: MethodArgs<'arc72_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_totalSupply()uint256'>]>

  /**
   * Calls the arc72_tokenByIndex(uint256)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc72TokenByIndex(args: MethodArgs<'arc72_tokenByIndex(uint256)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'arc72_tokenByIndex(uint256)uint256'>]>

  /**
   * Calls the supportsInterface(byte[4])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  supportsInterface(args: MethodArgs<'supportsInterface(byte[4])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'supportsInterface(byte[4])bool'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the CollectionRegistrar smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the CollectionRegistrar smart contract using the killApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams): CollectionRegistrarComposer<[...TReturns, MethodReturn<'killApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CollectionRegistrar smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CollectionRegistrarComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CollectionRegistrarComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CollectionRegistrarComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CollectionRegistrarComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CollectionRegistrarComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CollectionRegistrarComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
