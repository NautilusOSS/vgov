/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "veto_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "execute_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "queue_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "finalize_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cancel_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_quorum_requirement(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_total_voting_power(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "add_power_source(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_power_source(uint64)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "PowerSource",
          "elements": [
            [
              "power_source_id",
              "uint64"
            ],
            [
              "power_multiplier",
              "uint64"
            ]
          ]
        }
      }
    },
    "update_power_source(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "lock_power(uint64,uint256,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "PowerLock",
          "elements": [
            [
              "power_source_id",
              "uint64"
            ],
            [
              "power_source_amount",
              "uint256"
            ],
            [
              "power_source_unlock_timestamp",
              "uint64"
            ],
            [
              "power_source_owner",
              "address"
            ],
            [
              "power_granted",
              "uint256"
            ],
            [
              "lockup_duration",
              "uint64"
            ],
            [
              "lockup_bonus_multiplier",
              "uint64"
            ]
          ]
        }
      }
    },
    "unlock_power(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal_node(byte[64],byte[512])byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Proposal",
          "elements": [
            [
              "proposal_index",
              "uint64"
            ],
            [
              "proposal_status",
              "uint64"
            ],
            [
              "proposer",
              "address"
            ],
            [
              "proposal_title",
              "byte[64]"
            ],
            [
              "proposal_description",
              "byte[512]"
            ],
            [
              "proposal_node",
              "byte[32]"
            ],
            [
              "proposal_category_id",
              "uint64"
            ],
            [
              "proposal_total_votes",
              "uint64"
            ],
            [
              "proposal_yes_votes",
              "uint64"
            ],
            [
              "proposal_total_power",
              "uint256"
            ],
            [
              "proposal_activation_power",
              "uint256"
            ],
            [
              "created_at_timestamp",
              "uint64"
            ],
            [
              "voting_start_timestamp",
              "uint64"
            ],
            [
              "voting_end_timestamp",
              "uint64"
            ],
            [
              "proposal_action_hash",
              "byte[32]"
            ],
            [
              "executed_at_timestamp",
              "uint64"
            ],
            [
              "execution_txn_id",
              "uint64"
            ],
            [
              "proposal_activation_timestamp",
              "uint64"
            ],
            [
              "proposal_quorum_threshold",
              "uint64"
            ],
            [
              "proposal_quorum_met",
              "bool"
            ],
            [
              "proposal_quorum_status",
              "uint64"
            ],
            [
              "proposal_yes_power",
              "uint256"
            ]
          ]
        }
      }
    },
    "get_vote(byte[32],address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "propose(byte[64],byte[512],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "activate_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cast_vote(byte[32],uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reject_proposal(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_active_proposal_count()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_total_voter_count()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_participation_rate()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal_participation_rate(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_eligible_voter_count()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_participating_voter_count()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_finalized_proposal_count()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_average_participation_per_proposal()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_average_votes_per_proposal()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter_influence_score(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter_engagement_score(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "has_voter_participated_in_proposal(address,byte[32])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter_participation_timestamp(address,byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter_proposal_count(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter_last_proposal_node(address)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_quorum_requirement()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_quorum_threshold()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "check_proposal_quorum(byte[32])bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal_quorum_status(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal_quorum_progress(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_proposal_quorum_threshold(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_lockup_bonus_multiplier(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_lockup_tier_info(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "calculate_potential_power_granted(uint64,uint256,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_lockup_tier_duration(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_lockup_tier_bonus(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_power_lock_info(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Voter",
          "elements": [
            [
              "voter_address",
              "address"
            ],
            [
              "vote_power",
              "uint256"
            ],
            [
              "vote_timestamp",
              "uint64"
            ],
            [
              "proposals_participated",
              "uint64"
            ],
            [
              "last_participation_timestamp",
              "uint64"
            ],
            [
              "last_proposal_node",
              "byte[32]"
            ]
          ]
        }
      }
    },
    "check_proposal_activation(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_election_node(byte[64],byte[512])byte[32]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "ElectionProposal",
          "elements": [
            [
              "election_index",
              "uint64"
            ],
            [
              "election_status",
              "uint64"
            ],
            [
              "proposer",
              "address"
            ],
            [
              "election_title",
              "byte[64]"
            ],
            [
              "election_description",
              "byte[512]"
            ],
            [
              "election_node",
              "byte[32]"
            ],
            [
              "created_at_timestamp",
              "uint64"
            ],
            [
              "election_start_timestamp",
              "uint64"
            ],
            [
              "election_end_timestamp",
              "uint64"
            ],
            [
              "endorsement_count",
              "uint64"
            ],
            [
              "endorsement_votes",
              "uint256"
            ],
            [
              "endorsement_timestamp",
              "uint64"
            ]
          ]
        }
      }
    },
    "propose_election(byte[64],byte[512],uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Endorsement",
          "elements": [
            [
              "endorsement_node",
              "byte[32]"
            ],
            [
              "endorsement_election_node",
              "byte[32]"
            ],
            [
              "endorsement_candidate_node",
              "byte[32]"
            ],
            [
              "endorsement_count",
              "uint64"
            ],
            [
              "endorsement_votes",
              "uint256"
            ],
            [
              "endorsement_timestamp",
              "uint64"
            ]
          ]
        }
      }
    },
    "get_endorsement(byte[32],address)bool": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpfX21haW5fXy5Qb3dHb3Zlcm5hbmNlLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5LmJhazoxNTQ1CiAgICAvLyBjbGFzcyBQb3dHb3Zlcm5hbmNlKEdvdmVybmFuY2UsIEVsZWN0aW9uLCBPd25hYmxlLCBVcGdyYWRlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "activation_threshold": {
          "type": "bytes",
          "key": "activation_threshold"
        },
        "active_proposal_count": {
          "type": "uint64",
          "key": "active_proposal_count"
        },
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "election_count": {
          "type": "uint64",
          "key": "election_count"
        },
        "endorsement_count": {
          "type": "uint64",
          "key": "endorsement_count"
        },
        "finalized_proposal_count": {
          "type": "uint64",
          "key": "finalized_proposal_count"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "proposal_count": {
          "type": "uint64",
          "key": "proposal_count"
        },
        "quorum_requirement": {
          "type": "bytes",
          "key": "quorum_requirement"
        },
        "total_participating_voters": {
          "type": "uint64",
          "key": "total_participating_voters"
        },
        "total_participation_power": {
          "type": "bytes",
          "key": "total_participation_power"
        },
        "total_voter_count": {
          "type": "uint64",
          "key": "total_voter_count"
        },
        "total_voting_power": {
          "type": "bytes",
          "key": "total_voting_power"
        },
        "treasury_app_id": {
          "type": "uint64",
          "key": "treasury_app_id"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        },
        "vote_count": {
          "type": "uint64",
          "key": "vote_count"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "PowGovernance",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "veto_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Veto a queued proposal - only owner can veto"
      },
      {
        "name": "execute_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Execute a queued proposal - only owner can execute"
      },
      {
        "name": "queue_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Queue a succeeded proposal for execution - only owner can queue"
      },
      {
        "name": "finalize_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Finalize a proposal after voting period ends - only owner can finalize"
      },
      {
        "name": "cancel_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Cancel a pending proposal - only owner can cancel"
      },
      {
        "name": "set_quorum_requirement",
        "args": [
          {
            "type": "uint256",
            "name": "quorum_bps"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the global quorum requirement - only owner can set"
      },
      {
        "name": "update_total_voting_power",
        "args": [
          {
            "type": "uint256",
            "name": "new_total_power"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Update the total voting power - only owner can update"
      },
      {
        "name": "add_power_source",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint64",
            "name": "power_multiplier"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_power_source",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "update_power_source",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint64",
            "name": "power_multiplier"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "lock_power",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint256",
            "name": "power_source_amount"
          },
          {
            "type": "uint64",
            "name": "power_unlock_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_power_lock",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint64",
            "name": "power_unlock_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint256,uint64,address,uint256,uint64,uint64)"
        }
      },
      {
        "name": "unlock_power",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint64",
            "name": "power_unlock_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_proposal_node",
        "args": [
          {
            "type": "byte[64]",
            "name": "proposal_title"
          },
          {
            "type": "byte[512]",
            "name": "proposal_description"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "get_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)"
        }
      },
      {
        "name": "get_vote",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          },
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "propose",
        "args": [
          {
            "type": "byte[64]",
            "name": "proposal_title"
          },
          {
            "type": "byte[512]",
            "name": "proposal_description"
          },
          {
            "type": "uint64",
            "name": "proposal_category_id"
          },
          {
            "type": "uint64",
            "name": "proposal_start_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "activate_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cast_vote",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          },
          {
            "type": "uint64",
            "name": "support"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reject_proposal",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Check if a pending proposal should be rejected due to insufficient activation votes"
      },
      {
        "name": "get_active_proposal_count",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the current number of active proposals"
      },
      {
        "name": "get_total_voter_count",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the current number of unique voters"
      },
      {
        "name": "get_participation_rate",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the current participation rate as a percentage (0-100)"
      },
      {
        "name": "get_proposal_participation_rate",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get participation rate for a specific proposal as a percentage (0-100)"
      },
      {
        "name": "get_eligible_voter_count",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the number of voters with voting power > 0"
      },
      {
        "name": "get_participating_voter_count",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the number of voters who have actually participated in voting"
      },
      {
        "name": "get_finalized_proposal_count",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the number of proposals that have been finalized"
      },
      {
        "name": "get_average_participation_per_proposal",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get average participation power per finalized proposal"
      },
      {
        "name": "get_average_votes_per_proposal",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get average number of votes per proposal"
      },
      {
        "name": "get_voter_influence_score",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get influence score for a specific voter (0-100) based on voting power"
      },
      {
        "name": "get_voter_engagement_score",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get engagement score for a specific voter (0-100) based on actual participation"
      },
      {
        "name": "has_voter_participated_in_proposal",
        "args": [
          {
            "type": "address",
            "name": "account"
          },
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        },
        "desc": "Check if a voter has participated in a specific proposal"
      },
      {
        "name": "get_voter_participation_timestamp",
        "args": [
          {
            "type": "address",
            "name": "account"
          },
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the timestamp when a voter participated in a specific proposal"
      },
      {
        "name": "get_voter_proposal_count",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the number of proposals a voter has participated in"
      },
      {
        "name": "get_voter_last_proposal_node",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        },
        "desc": "Get the node of the last proposal this voter participated in"
      },
      {
        "name": "get_quorum_requirement",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint256"
        },
        "desc": "Get the global quorum requirement in basis points (bps) with base of 10000"
      },
      {
        "name": "get_quorum_threshold",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint256"
        },
        "desc": "Get the current quorum threshold in voting power units"
      },
      {
        "name": "check_proposal_quorum",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        },
        "desc": "Check if a proposal meets the quorum requirement"
      },
      {
        "name": "get_proposal_quorum_status",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get quorum status for a proposal: 0 = not met, 1 = met, 2 = exceeded"
      },
      {
        "name": "get_proposal_quorum_progress",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get quorum progress as percentage (0-10000 bps) for a proposal"
      },
      {
        "name": "get_proposal_quorum_threshold",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the quorum threshold for a specific proposal"
      },
      {
        "name": "get_lockup_bonus_multiplier",
        "args": [
          {
            "type": "uint64",
            "name": "lockup_duration_seconds"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the bonus multiplier for a given lockup duration in seconds"
      },
      {
        "name": "get_lockup_tier_info",
        "args": [
          {
            "type": "uint64",
            "name": "lockup_duration_seconds"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the lockup tier (1-5) for a given duration"
      },
      {
        "name": "calculate_potential_power_granted",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint256",
            "name": "power_source_amount"
          },
          {
            "type": "uint64",
            "name": "lockup_duration_seconds"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint256"
        },
        "desc": "Calculate potential voting power granted for a given lockup scenario"
      },
      {
        "name": "get_lockup_tier_duration",
        "args": [
          {
            "type": "uint64",
            "name": "tier"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the minimum duration required for a specific lockup tier"
      },
      {
        "name": "get_lockup_tier_bonus",
        "args": [
          {
            "type": "uint64",
            "name": "tier"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the bonus multiplier for a specific lockup tier"
      },
      {
        "name": "get_power_lock_info",
        "args": [
          {
            "type": "uint64",
            "name": "power_source_id"
          },
          {
            "type": "uint64",
            "name": "power_unlock_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get comprehensive lockup information for a power lock"
      },
      {
        "name": "get_voter",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,uint256,uint64,uint64,uint64,byte[32])"
        }
      },
      {
        "name": "check_proposal_activation",
        "args": [
          {
            "type": "byte[32]",
            "name": "proposal_node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_election_node",
        "args": [
          {
            "type": "byte[64]",
            "name": "election_title"
          },
          {
            "type": "byte[512]",
            "name": "election_description"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "get_election",
        "args": [
          {
            "type": "byte[32]",
            "name": "election_node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)"
        }
      },
      {
        "name": "propose_election",
        "args": [
          {
            "type": "byte[64]",
            "name": "election_title"
          },
          {
            "type": "byte[512]",
            "name": "election_description"
          },
          {
            "type": "uint64",
            "name": "election_start_timestamp"
          },
          {
            "type": "uint64",
            "name": "election_end_timestamp"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "endorse_candidates",
        "args": [
          {
            "type": "byte[32]",
            "name": "election_node"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node_1"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node_2"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node_3"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node_4"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node_5"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_candidate_endorsement",
        "args": [
          {
            "type": "byte[32]",
            "name": "election_node"
          },
          {
            "type": "byte[32]",
            "name": "candidate_node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "(byte[32],byte[32],byte[32],uint64,uint256,uint64)"
        }
      },
      {
        "name": "get_endorsement",
        "args": [
          {
            "type": "byte[32]",
            "name": "election_node"
          },
          {
            "type": "address",
            "name": "voter_node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the PowGovernance smart contract.
 */
export type PowGovernance = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'veto_proposal(byte[32])void' | 'veto_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'execute_proposal(byte[32])void' | 'execute_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'queue_proposal(byte[32])void' | 'queue_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'finalize_proposal(byte[32])void' | 'finalize_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'cancel_proposal(byte[32])void' | 'cancel_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'set_quorum_requirement(uint256)void' | 'set_quorum_requirement', {
      argsObj: {
        quorumBps: bigint | number
      }
      argsTuple: [quorumBps: bigint | number]
      returns: void
    }>
    & Record<'update_total_voting_power(uint256)void' | 'update_total_voting_power', {
      argsObj: {
        newTotalPower: bigint | number
      }
      argsTuple: [newTotalPower: bigint | number]
      returns: void
    }>
    & Record<'add_power_source(uint64,uint64)void' | 'add_power_source', {
      argsObj: {
        powerSourceId: bigint | number
        powerMultiplier: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerMultiplier: bigint | number]
      returns: void
    }>
    & Record<'get_power_source(uint64)(uint64,uint64)' | 'get_power_source', {
      argsObj: {
        powerSourceId: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number]
      returns: PowerSource
    }>
    & Record<'update_power_source(uint64,uint64)void' | 'update_power_source', {
      argsObj: {
        powerSourceId: bigint | number
        powerMultiplier: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerMultiplier: bigint | number]
      returns: void
    }>
    & Record<'lock_power(uint64,uint256,uint64)void' | 'lock_power', {
      argsObj: {
        powerSourceId: bigint | number
        powerSourceAmount: bigint | number
        powerUnlockTimestamp: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerSourceAmount: bigint | number, powerUnlockTimestamp: bigint | number]
      returns: void
    }>
    & Record<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)' | 'get_power_lock', {
      argsObj: {
        powerSourceId: bigint | number
        powerUnlockTimestamp: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerUnlockTimestamp: bigint | number]
      returns: PowerLock
    }>
    & Record<'unlock_power(uint64,uint64)void' | 'unlock_power', {
      argsObj: {
        powerSourceId: bigint | number
        powerUnlockTimestamp: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerUnlockTimestamp: bigint | number]
      returns: void
    }>
    & Record<'get_proposal_node(byte[64],byte[512])byte[32]' | 'get_proposal_node', {
      argsObj: {
        proposalTitle: Uint8Array
        proposalDescription: Uint8Array
      }
      argsTuple: [proposalTitle: Uint8Array, proposalDescription: Uint8Array]
      returns: Uint8Array
    }>
    & Record<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)' | 'get_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: Proposal
    }>
    & Record<'get_vote(byte[32],address)uint64' | 'get_vote', {
      argsObj: {
        proposalNode: Uint8Array
        account: string
      }
      argsTuple: [proposalNode: Uint8Array, account: string]
      returns: bigint
    }>
    & Record<'propose(byte[64],byte[512],uint64,uint64)byte[32]' | 'propose', {
      argsObj: {
        proposalTitle: Uint8Array
        proposalDescription: Uint8Array
        proposalCategoryId: bigint | number
        proposalStartTimestamp: bigint | number
      }
      argsTuple: [proposalTitle: Uint8Array, proposalDescription: Uint8Array, proposalCategoryId: bigint | number, proposalStartTimestamp: bigint | number]
      returns: Uint8Array
    }>
    & Record<'activate_proposal(byte[32])void' | 'activate_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'cast_vote(byte[32],uint64)void' | 'cast_vote', {
      argsObj: {
        proposalNode: Uint8Array
        support: bigint | number
      }
      argsTuple: [proposalNode: Uint8Array, support: bigint | number]
      returns: void
    }>
    & Record<'reject_proposal(byte[32])void' | 'reject_proposal', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'get_active_proposal_count()uint64' | 'get_active_proposal_count', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_total_voter_count()uint64' | 'get_total_voter_count', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_participation_rate()uint64' | 'get_participation_rate', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_proposal_participation_rate(byte[32])uint64' | 'get_proposal_participation_rate', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: bigint
    }>
    & Record<'get_eligible_voter_count()uint64' | 'get_eligible_voter_count', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_participating_voter_count()uint64' | 'get_participating_voter_count', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_finalized_proposal_count()uint64' | 'get_finalized_proposal_count', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_average_participation_per_proposal()uint64' | 'get_average_participation_per_proposal', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_average_votes_per_proposal()uint64' | 'get_average_votes_per_proposal', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_voter_influence_score(address)uint64' | 'get_voter_influence_score', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'get_voter_engagement_score(address)uint64' | 'get_voter_engagement_score', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'has_voter_participated_in_proposal(address,byte[32])bool' | 'has_voter_participated_in_proposal', {
      argsObj: {
        account: string
        proposalNode: Uint8Array
      }
      argsTuple: [account: string, proposalNode: Uint8Array]
      returns: boolean
    }>
    & Record<'get_voter_participation_timestamp(address,byte[32])uint64' | 'get_voter_participation_timestamp', {
      argsObj: {
        account: string
        proposalNode: Uint8Array
      }
      argsTuple: [account: string, proposalNode: Uint8Array]
      returns: bigint
    }>
    & Record<'get_voter_proposal_count(address)uint64' | 'get_voter_proposal_count', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'get_voter_last_proposal_node(address)byte[32]' | 'get_voter_last_proposal_node', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: Uint8Array
    }>
    & Record<'get_quorum_requirement()uint256' | 'get_quorum_requirement', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_quorum_threshold()uint256' | 'get_quorum_threshold', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'check_proposal_quorum(byte[32])bool' | 'check_proposal_quorum', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: boolean
    }>
    & Record<'get_proposal_quorum_status(byte[32])uint64' | 'get_proposal_quorum_status', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: bigint
    }>
    & Record<'get_proposal_quorum_progress(byte[32])uint64' | 'get_proposal_quorum_progress', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: bigint
    }>
    & Record<'get_proposal_quorum_threshold(byte[32])uint64' | 'get_proposal_quorum_threshold', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: bigint
    }>
    & Record<'get_lockup_bonus_multiplier(uint64)uint64' | 'get_lockup_bonus_multiplier', {
      argsObj: {
        lockupDurationSeconds: bigint | number
      }
      argsTuple: [lockupDurationSeconds: bigint | number]
      returns: bigint
    }>
    & Record<'get_lockup_tier_info(uint64)uint64' | 'get_lockup_tier_info', {
      argsObj: {
        lockupDurationSeconds: bigint | number
      }
      argsTuple: [lockupDurationSeconds: bigint | number]
      returns: bigint
    }>
    & Record<'calculate_potential_power_granted(uint64,uint256,uint64)uint256' | 'calculate_potential_power_granted', {
      argsObj: {
        powerSourceId: bigint | number
        powerSourceAmount: bigint | number
        lockupDurationSeconds: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerSourceAmount: bigint | number, lockupDurationSeconds: bigint | number]
      returns: bigint
    }>
    & Record<'get_lockup_tier_duration(uint64)uint64' | 'get_lockup_tier_duration', {
      argsObj: {
        tier: bigint | number
      }
      argsTuple: [tier: bigint | number]
      returns: bigint
    }>
    & Record<'get_lockup_tier_bonus(uint64)uint64' | 'get_lockup_tier_bonus', {
      argsObj: {
        tier: bigint | number
      }
      argsTuple: [tier: bigint | number]
      returns: bigint
    }>
    & Record<'get_power_lock_info(uint64,uint64)uint64' | 'get_power_lock_info', {
      argsObj: {
        powerSourceId: bigint | number
        powerUnlockTimestamp: bigint | number
      }
      argsTuple: [powerSourceId: bigint | number, powerUnlockTimestamp: bigint | number]
      returns: bigint
    }>
    & Record<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])' | 'get_voter', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: Voter
    }>
    & Record<'check_proposal_activation(byte[32])void' | 'check_proposal_activation', {
      argsObj: {
        proposalNode: Uint8Array
      }
      argsTuple: [proposalNode: Uint8Array]
      returns: void
    }>
    & Record<'get_election_node(byte[64],byte[512])byte[32]' | 'get_election_node', {
      argsObj: {
        electionTitle: Uint8Array
        electionDescription: Uint8Array
      }
      argsTuple: [electionTitle: Uint8Array, electionDescription: Uint8Array]
      returns: Uint8Array
    }>
    & Record<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)' | 'get_election', {
      argsObj: {
        electionNode: Uint8Array
      }
      argsTuple: [electionNode: Uint8Array]
      returns: ElectionProposal
    }>
    & Record<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]' | 'propose_election', {
      argsObj: {
        electionTitle: Uint8Array
        electionDescription: Uint8Array
        electionStartTimestamp: bigint | number
        electionEndTimestamp: bigint | number
      }
      argsTuple: [electionTitle: Uint8Array, electionDescription: Uint8Array, electionStartTimestamp: bigint | number, electionEndTimestamp: bigint | number]
      returns: Uint8Array
    }>
    & Record<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void' | 'endorse_candidates', {
      argsObj: {
        electionNode: Uint8Array
        candidateNode_1: Uint8Array
        candidateNode_2: Uint8Array
        candidateNode_3: Uint8Array
        candidateNode_4: Uint8Array
        candidateNode_5: Uint8Array
      }
      argsTuple: [electionNode: Uint8Array, candidateNode_1: Uint8Array, candidateNode_2: Uint8Array, candidateNode_3: Uint8Array, candidateNode_4: Uint8Array, candidateNode_5: Uint8Array]
      returns: void
    }>
    & Record<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)' | 'get_candidate_endorsement', {
      argsObj: {
        electionNode: Uint8Array
        candidateNode: Uint8Array
      }
      argsTuple: [electionNode: Uint8Array, candidateNode: Uint8Array]
      returns: Endorsement
    }>
    & Record<'get_endorsement(byte[32],address)bool' | 'get_endorsement', {
      argsObj: {
        electionNode: Uint8Array
        voterNode: string
      }
      argsTuple: [electionNode: Uint8Array, voterNode: string]
      returns: boolean
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      activationThreshold?: BinaryState
      activeProposalCount?: IntegerState
      contractVersion?: IntegerState
      deploymentVersion?: IntegerState
      electionCount?: IntegerState
      endorsementCount?: IntegerState
      finalizedProposalCount?: IntegerState
      owner?: BinaryState
      proposalCount?: IntegerState
      quorumRequirement?: BinaryState
      totalParticipatingVoters?: IntegerState
      totalParticipationPower?: BinaryState
      totalVoterCount?: IntegerState
      totalVotingPower?: BinaryState
      treasuryAppId?: IntegerState
      updatable?: IntegerState
      upgrader?: BinaryState
      voteCount?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PowGovernanceSig = keyof PowGovernance['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PowGovernanceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a PowerSource result as a struct
 */
export type PowerSource = {
  powerSourceId: bigint
  powerMultiplier: bigint
}
/**
 * Converts the tuple representation of a PowerSource to the struct representation
 */
export function PowerSource([powerSourceId, powerMultiplier]: [bigint, bigint] ) {
  return {
    powerSourceId,
    powerMultiplier,
  }
}
/**
 * Represents a PowerLock result as a struct
 */
export type PowerLock = {
  powerSourceId: bigint
  powerSourceAmount: bigint
  powerSourceUnlockTimestamp: bigint
  powerSourceOwner: string
  powerGranted: bigint
  lockupDuration: bigint
  lockupBonusMultiplier: bigint
}
/**
 * Converts the tuple representation of a PowerLock to the struct representation
 */
export function PowerLock([powerSourceId, powerSourceAmount, powerSourceUnlockTimestamp, powerSourceOwner, powerGranted, lockupDuration, lockupBonusMultiplier]: [bigint, bigint, bigint, string, bigint, bigint, bigint] ) {
  return {
    powerSourceId,
    powerSourceAmount,
    powerSourceUnlockTimestamp,
    powerSourceOwner,
    powerGranted,
    lockupDuration,
    lockupBonusMultiplier,
  }
}
/**
 * Represents a Proposal result as a struct
 */
export type Proposal = {
  proposalIndex: bigint
  proposalStatus: bigint
  proposer: string
  proposalTitle: Uint8Array
  proposalDescription: Uint8Array
  proposalNode: Uint8Array
  proposalCategoryId: bigint
  proposalTotalVotes: bigint
  proposalYesVotes: bigint
  proposalTotalPower: bigint
  proposalActivationPower: bigint
  createdAtTimestamp: bigint
  votingStartTimestamp: bigint
  votingEndTimestamp: bigint
  proposalActionHash: Uint8Array
  executedAtTimestamp: bigint
  executionTxnId: bigint
  proposalActivationTimestamp: bigint
  proposalQuorumThreshold: bigint
  proposalQuorumMet: boolean
  proposalQuorumStatus: bigint
  proposalYesPower: bigint
}
/**
 * Converts the tuple representation of a Proposal to the struct representation
 */
export function Proposal([proposalIndex, proposalStatus, proposer, proposalTitle, proposalDescription, proposalNode, proposalCategoryId, proposalTotalVotes, proposalYesVotes, proposalTotalPower, proposalActivationPower, createdAtTimestamp, votingStartTimestamp, votingEndTimestamp, proposalActionHash, executedAtTimestamp, executionTxnId, proposalActivationTimestamp, proposalQuorumThreshold, proposalQuorumMet, proposalQuorumStatus, proposalYesPower]: [bigint, bigint, string, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, Uint8Array, bigint, bigint, bigint, bigint, boolean, bigint, bigint] ) {
  return {
    proposalIndex,
    proposalStatus,
    proposer,
    proposalTitle,
    proposalDescription,
    proposalNode,
    proposalCategoryId,
    proposalTotalVotes,
    proposalYesVotes,
    proposalTotalPower,
    proposalActivationPower,
    createdAtTimestamp,
    votingStartTimestamp,
    votingEndTimestamp,
    proposalActionHash,
    executedAtTimestamp,
    executionTxnId,
    proposalActivationTimestamp,
    proposalQuorumThreshold,
    proposalQuorumMet,
    proposalQuorumStatus,
    proposalYesPower,
  }
}
/**
 * Represents a Voter result as a struct
 */
export type Voter = {
  voterAddress: string
  votePower: bigint
  voteTimestamp: bigint
  proposalsParticipated: bigint
  lastParticipationTimestamp: bigint
  lastProposalNode: Uint8Array
}
/**
 * Converts the tuple representation of a Voter to the struct representation
 */
export function Voter([voterAddress, votePower, voteTimestamp, proposalsParticipated, lastParticipationTimestamp, lastProposalNode]: [string, bigint, bigint, bigint, bigint, Uint8Array] ) {
  return {
    voterAddress,
    votePower,
    voteTimestamp,
    proposalsParticipated,
    lastParticipationTimestamp,
    lastProposalNode,
  }
}
/**
 * Represents a ElectionProposal result as a struct
 */
export type ElectionProposal = {
  electionIndex: bigint
  electionStatus: bigint
  proposer: string
  electionTitle: Uint8Array
  electionDescription: Uint8Array
  electionNode: Uint8Array
  createdAtTimestamp: bigint
  electionStartTimestamp: bigint
  electionEndTimestamp: bigint
  endorsementCount: bigint
  endorsementVotes: bigint
  endorsementTimestamp: bigint
}
/**
 * Converts the tuple representation of a ElectionProposal to the struct representation
 */
export function ElectionProposal([electionIndex, electionStatus, proposer, electionTitle, electionDescription, electionNode, createdAtTimestamp, electionStartTimestamp, electionEndTimestamp, endorsementCount, endorsementVotes, endorsementTimestamp]: [bigint, bigint, string, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint] ) {
  return {
    electionIndex,
    electionStatus,
    proposer,
    electionTitle,
    electionDescription,
    electionNode,
    createdAtTimestamp,
    electionStartTimestamp,
    electionEndTimestamp,
    endorsementCount,
    endorsementVotes,
    endorsementTimestamp,
  }
}
/**
 * Represents a Endorsement result as a struct
 */
export type Endorsement = {
  endorsementNode: Uint8Array
  endorsementElectionNode: Uint8Array
  endorsementCandidateNode: Uint8Array
  endorsementCount: bigint
  endorsementVotes: bigint
  endorsementTimestamp: bigint
}
/**
 * Converts the tuple representation of a Endorsement to the struct representation
 */
export function Endorsement([endorsementNode, endorsementElectionNode, endorsementCandidateNode, endorsementCount, endorsementVotes, endorsementTimestamp]: [Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint] ) {
  return {
    endorsementNode,
    endorsementElectionNode,
    endorsementCandidateNode,
    endorsementCount,
    endorsementVotes,
    endorsementTimestamp,
  }
}
/**
 * Maps a method signature from the PowGovernance smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PowGovernanceSig> = PowGovernance['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PowGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PowGovernanceSig> = PowGovernance['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PowGovernanceCreateCalls = (typeof PowGovernanceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PowGovernanceCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type PowGovernanceUpdateCalls = (typeof PowGovernanceCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type PowGovernanceUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type PowGovernanceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PowGovernanceCreateCalls) => PowGovernanceCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: PowGovernanceUpdateCalls) => PowGovernanceUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PowGovernanceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the PowGovernance smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the PowGovernance smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the veto_proposal(byte[32])void ABI method
   *
   * Veto a queued proposal - only owner can veto
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static vetoProposal(args: MethodArgs<'veto_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'veto_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the execute_proposal(byte[32])void ABI method
   *
   * Execute a queued proposal - only owner can execute
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static executeProposal(args: MethodArgs<'execute_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'execute_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the queue_proposal(byte[32])void ABI method
   *
   * Queue a succeeded proposal for execution - only owner can queue
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static queueProposal(args: MethodArgs<'queue_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'queue_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the finalize_proposal(byte[32])void ABI method
   *
   * Finalize a proposal after voting period ends - only owner can finalize
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static finalizeProposal(args: MethodArgs<'finalize_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'finalize_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cancel_proposal(byte[32])void ABI method
   *
   * Cancel a pending proposal - only owner can cancel
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cancelProposal(args: MethodArgs<'cancel_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cancel_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_quorum_requirement(uint256)void ABI method
   *
   * Set the global quorum requirement - only owner can set
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setQuorumRequirement(args: MethodArgs<'set_quorum_requirement(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_quorum_requirement(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.quorumBps],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_total_voting_power(uint256)void ABI method
   *
   * Update the total voting power - only owner can update
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateTotalVotingPower(args: MethodArgs<'update_total_voting_power(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_total_voting_power(uint256)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newTotalPower],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the add_power_source(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addPowerSource(args: MethodArgs<'add_power_source(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_power_source(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerMultiplier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_power_source(uint64)(uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPowerSource(args: MethodArgs<'get_power_source(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_power_source(uint64)(uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_power_source(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePowerSource(args: MethodArgs<'update_power_source(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_power_source(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerMultiplier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the lock_power(uint64,uint256,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static lockPower(args: MethodArgs<'lock_power(uint64,uint256,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'lock_power(uint64,uint256,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerSourceAmount, args.powerUnlockTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPowerLock(args: MethodArgs<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerUnlockTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unlock_power(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unlockPower(args: MethodArgs<'unlock_power(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unlock_power(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerUnlockTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal_node(byte[64],byte[512])byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposalNode(args: MethodArgs<'get_proposal_node(byte[64],byte[512])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal_node(byte[64],byte[512])byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalTitle, args.proposalDescription],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposal(args: MethodArgs<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_vote(byte[32],address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVote(args: MethodArgs<'get_vote(byte[32],address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_vote(byte[32],address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode, args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the propose(byte[64],byte[512],uint64,uint64)byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static propose(args: MethodArgs<'propose(byte[64],byte[512],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'propose(byte[64],byte[512],uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalTitle, args.proposalDescription, args.proposalCategoryId, args.proposalStartTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the activate_proposal(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static activateProposal(args: MethodArgs<'activate_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'activate_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cast_vote(byte[32],uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static castVote(args: MethodArgs<'cast_vote(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cast_vote(byte[32],uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode, args.support],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reject_proposal(byte[32])void ABI method
   *
   * Check if a pending proposal should be rejected due to insufficient activation votes
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rejectProposal(args: MethodArgs<'reject_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reject_proposal(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_active_proposal_count()uint64 ABI method
   *
   * Get the current number of active proposals
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getActiveProposalCount(args: MethodArgs<'get_active_proposal_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_active_proposal_count()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_total_voter_count()uint64 ABI method
   *
   * Get the current number of unique voters
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTotalVoterCount(args: MethodArgs<'get_total_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_total_voter_count()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_participation_rate()uint64 ABI method
   *
   * Get the current participation rate as a percentage (0-100)
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getParticipationRate(args: MethodArgs<'get_participation_rate()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_participation_rate()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal_participation_rate(byte[32])uint64 ABI method
   *
   * Get participation rate for a specific proposal as a percentage (0-100)
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposalParticipationRate(args: MethodArgs<'get_proposal_participation_rate(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal_participation_rate(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_eligible_voter_count()uint64 ABI method
   *
   * Get the number of voters with voting power > 0
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEligibleVoterCount(args: MethodArgs<'get_eligible_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_eligible_voter_count()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_participating_voter_count()uint64 ABI method
   *
   * Get the number of voters who have actually participated in voting
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getParticipatingVoterCount(args: MethodArgs<'get_participating_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_participating_voter_count()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_finalized_proposal_count()uint64 ABI method
   *
   * Get the number of proposals that have been finalized
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getFinalizedProposalCount(args: MethodArgs<'get_finalized_proposal_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_finalized_proposal_count()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_average_participation_per_proposal()uint64 ABI method
   *
   * Get average participation power per finalized proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAverageParticipationPerProposal(args: MethodArgs<'get_average_participation_per_proposal()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_average_participation_per_proposal()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_average_votes_per_proposal()uint64 ABI method
   *
   * Get average number of votes per proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAverageVotesPerProposal(args: MethodArgs<'get_average_votes_per_proposal()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_average_votes_per_proposal()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter_influence_score(address)uint64 ABI method
   *
   * Get influence score for a specific voter (0-100) based on voting power
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoterInfluenceScore(args: MethodArgs<'get_voter_influence_score(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter_influence_score(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter_engagement_score(address)uint64 ABI method
   *
   * Get engagement score for a specific voter (0-100) based on actual participation
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoterEngagementScore(args: MethodArgs<'get_voter_engagement_score(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter_engagement_score(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the has_voter_participated_in_proposal(address,byte[32])bool ABI method
   *
   * Check if a voter has participated in a specific proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static hasVoterParticipatedInProposal(args: MethodArgs<'has_voter_participated_in_proposal(address,byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'has_voter_participated_in_proposal(address,byte[32])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter_participation_timestamp(address,byte[32])uint64 ABI method
   *
   * Get the timestamp when a voter participated in a specific proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoterParticipationTimestamp(args: MethodArgs<'get_voter_participation_timestamp(address,byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter_participation_timestamp(address,byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account, args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter_proposal_count(address)uint64 ABI method
   *
   * Get the number of proposals a voter has participated in
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoterProposalCount(args: MethodArgs<'get_voter_proposal_count(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter_proposal_count(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter_last_proposal_node(address)byte[32] ABI method
   *
   * Get the node of the last proposal this voter participated in
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoterLastProposalNode(args: MethodArgs<'get_voter_last_proposal_node(address)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter_last_proposal_node(address)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_quorum_requirement()uint256 ABI method
   *
   * Get the global quorum requirement in basis points (bps) with base of 10000
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getQuorumRequirement(args: MethodArgs<'get_quorum_requirement()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_quorum_requirement()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_quorum_threshold()uint256 ABI method
   *
   * Get the current quorum threshold in voting power units
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getQuorumThreshold(args: MethodArgs<'get_quorum_threshold()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_quorum_threshold()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the check_proposal_quorum(byte[32])bool ABI method
   *
   * Check if a proposal meets the quorum requirement
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkProposalQuorum(args: MethodArgs<'check_proposal_quorum(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'check_proposal_quorum(byte[32])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal_quorum_status(byte[32])uint64 ABI method
   *
   * Get quorum status for a proposal: 0 = not met, 1 = met, 2 = exceeded
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposalQuorumStatus(args: MethodArgs<'get_proposal_quorum_status(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal_quorum_status(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal_quorum_progress(byte[32])uint64 ABI method
   *
   * Get quorum progress as percentage (0-10000 bps) for a proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposalQuorumProgress(args: MethodArgs<'get_proposal_quorum_progress(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal_quorum_progress(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_proposal_quorum_threshold(byte[32])uint64 ABI method
   *
   * Get the quorum threshold for a specific proposal
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProposalQuorumThreshold(args: MethodArgs<'get_proposal_quorum_threshold(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_proposal_quorum_threshold(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_lockup_bonus_multiplier(uint64)uint64 ABI method
   *
   * Get the bonus multiplier for a given lockup duration in seconds
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLockupBonusMultiplier(args: MethodArgs<'get_lockup_bonus_multiplier(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_lockup_bonus_multiplier(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.lockupDurationSeconds],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_lockup_tier_info(uint64)uint64 ABI method
   *
   * Get the lockup tier (1-5) for a given duration
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLockupTierInfo(args: MethodArgs<'get_lockup_tier_info(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_lockup_tier_info(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.lockupDurationSeconds],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the calculate_potential_power_granted(uint64,uint256,uint64)uint256 ABI method
   *
   * Calculate potential voting power granted for a given lockup scenario
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static calculatePotentialPowerGranted(args: MethodArgs<'calculate_potential_power_granted(uint64,uint256,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'calculate_potential_power_granted(uint64,uint256,uint64)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerSourceAmount, args.lockupDurationSeconds],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_lockup_tier_duration(uint64)uint64 ABI method
   *
   * Get the minimum duration required for a specific lockup tier
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLockupTierDuration(args: MethodArgs<'get_lockup_tier_duration(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_lockup_tier_duration(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.tier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_lockup_tier_bonus(uint64)uint64 ABI method
   *
   * Get the bonus multiplier for a specific lockup tier
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getLockupTierBonus(args: MethodArgs<'get_lockup_tier_bonus(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_lockup_tier_bonus(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.tier],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_power_lock_info(uint64,uint64)uint64 ABI method
   *
   * Get comprehensive lockup information for a power lock
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPowerLockInfo(args: MethodArgs<'get_power_lock_info(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_power_lock_info(uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.powerSourceId, args.powerUnlockTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoter(args: MethodArgs<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the check_proposal_activation(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static checkProposalActivation(args: MethodArgs<'check_proposal_activation(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'check_proposal_activation(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.proposalNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_election_node(byte[64],byte[512])byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getElectionNode(args: MethodArgs<'get_election_node(byte[64],byte[512])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_election_node(byte[64],byte[512])byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionTitle, args.electionDescription],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getElection(args: MethodArgs<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the propose_election(byte[64],byte[512],uint64,uint64)byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static proposeElection(args: MethodArgs<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'propose_election(byte[64],byte[512],uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionTitle, args.electionDescription, args.electionStartTimestamp, args.electionEndTimestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static endorseCandidates(args: MethodArgs<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionNode, args.candidateNode_1, args.candidateNode_2, args.candidateNode_3, args.candidateNode_4, args.candidateNode_5],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCandidateEndorsement(args: MethodArgs<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionNode, args.candidateNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_endorsement(byte[32],address)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEndorsement(args: MethodArgs<'get_endorsement(byte[32],address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_endorsement(byte[32],address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.electionNode, args.voterNode],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
}

/**
 * A client to make calls to the PowGovernance smart contract
 */
export class PowGovernanceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PowGovernanceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof PowGovernance['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the PowGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PowGovernanceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PowGovernanceCallFactory.create)
    const updateArgs = params.updateCall?.(PowGovernanceCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the PowGovernance smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the PowGovernance smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the PowGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the veto_proposal(byte[32])void ABI method.
   *
   * Veto a queued proposal - only owner can veto
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public vetoProposal(args: MethodArgs<'veto_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.vetoProposal(args, params))
  }

  /**
   * Calls the execute_proposal(byte[32])void ABI method.
   *
   * Execute a queued proposal - only owner can execute
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public executeProposal(args: MethodArgs<'execute_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.executeProposal(args, params))
  }

  /**
   * Calls the queue_proposal(byte[32])void ABI method.
   *
   * Queue a succeeded proposal for execution - only owner can queue
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public queueProposal(args: MethodArgs<'queue_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.queueProposal(args, params))
  }

  /**
   * Calls the finalize_proposal(byte[32])void ABI method.
   *
   * Finalize a proposal after voting period ends - only owner can finalize
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public finalizeProposal(args: MethodArgs<'finalize_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.finalizeProposal(args, params))
  }

  /**
   * Calls the cancel_proposal(byte[32])void ABI method.
   *
   * Cancel a pending proposal - only owner can cancel
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cancelProposal(args: MethodArgs<'cancel_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.cancelProposal(args, params))
  }

  /**
   * Calls the set_quorum_requirement(uint256)void ABI method.
   *
   * Set the global quorum requirement - only owner can set
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setQuorumRequirement(args: MethodArgs<'set_quorum_requirement(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.setQuorumRequirement(args, params))
  }

  /**
   * Calls the update_total_voting_power(uint256)void ABI method.
   *
   * Update the total voting power - only owner can update
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateTotalVotingPower(args: MethodArgs<'update_total_voting_power(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.updateTotalVotingPower(args, params))
  }

  /**
   * Calls the add_power_source(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addPowerSource(args: MethodArgs<'add_power_source(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.addPowerSource(args, params))
  }

  /**
   * Calls the get_power_source(uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPowerSource(args: MethodArgs<'get_power_source(uint64)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getPowerSource(args, params), PowerSource)
  }

  /**
   * Calls the update_power_source(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePowerSource(args: MethodArgs<'update_power_source(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.updatePowerSource(args, params))
  }

  /**
   * Calls the lock_power(uint64,uint256,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public lockPower(args: MethodArgs<'lock_power(uint64,uint256,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.lockPower(args, params))
  }

  /**
   * Calls the get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPowerLock(args: MethodArgs<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getPowerLock(args, params), PowerLock)
  }

  /**
   * Calls the unlock_power(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unlockPower(args: MethodArgs<'unlock_power(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.unlockPower(args, params))
  }

  /**
   * Calls the get_proposal_node(byte[64],byte[512])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposalNode(args: MethodArgs<'get_proposal_node(byte[64],byte[512])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposalNode(args, params))
  }

  /**
   * Calls the get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposal(args: MethodArgs<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposal(args, params), Proposal)
  }

  /**
   * Calls the get_vote(byte[32],address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVote(args: MethodArgs<'get_vote(byte[32],address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVote(args, params))
  }

  /**
   * Calls the propose(byte[64],byte[512],uint64,uint64)byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public propose(args: MethodArgs<'propose(byte[64],byte[512],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.propose(args, params))
  }

  /**
   * Calls the activate_proposal(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public activateProposal(args: MethodArgs<'activate_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.activateProposal(args, params))
  }

  /**
   * Calls the cast_vote(byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public castVote(args: MethodArgs<'cast_vote(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.castVote(args, params))
  }

  /**
   * Calls the reject_proposal(byte[32])void ABI method.
   *
   * Check if a pending proposal should be rejected due to insufficient activation votes
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rejectProposal(args: MethodArgs<'reject_proposal(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.rejectProposal(args, params))
  }

  /**
   * Calls the get_active_proposal_count()uint64 ABI method.
   *
   * Get the current number of active proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getActiveProposalCount(args: MethodArgs<'get_active_proposal_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getActiveProposalCount(args, params))
  }

  /**
   * Calls the get_total_voter_count()uint64 ABI method.
   *
   * Get the current number of unique voters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTotalVoterCount(args: MethodArgs<'get_total_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getTotalVoterCount(args, params))
  }

  /**
   * Calls the get_participation_rate()uint64 ABI method.
   *
   * Get the current participation rate as a percentage (0-100)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getParticipationRate(args: MethodArgs<'get_participation_rate()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getParticipationRate(args, params))
  }

  /**
   * Calls the get_proposal_participation_rate(byte[32])uint64 ABI method.
   *
   * Get participation rate for a specific proposal as a percentage (0-100)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposalParticipationRate(args: MethodArgs<'get_proposal_participation_rate(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposalParticipationRate(args, params))
  }

  /**
   * Calls the get_eligible_voter_count()uint64 ABI method.
   *
   * Get the number of voters with voting power > 0
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEligibleVoterCount(args: MethodArgs<'get_eligible_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getEligibleVoterCount(args, params))
  }

  /**
   * Calls the get_participating_voter_count()uint64 ABI method.
   *
   * Get the number of voters who have actually participated in voting
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getParticipatingVoterCount(args: MethodArgs<'get_participating_voter_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getParticipatingVoterCount(args, params))
  }

  /**
   * Calls the get_finalized_proposal_count()uint64 ABI method.
   *
   * Get the number of proposals that have been finalized
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getFinalizedProposalCount(args: MethodArgs<'get_finalized_proposal_count()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getFinalizedProposalCount(args, params))
  }

  /**
   * Calls the get_average_participation_per_proposal()uint64 ABI method.
   *
   * Get average participation power per finalized proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAverageParticipationPerProposal(args: MethodArgs<'get_average_participation_per_proposal()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getAverageParticipationPerProposal(args, params))
  }

  /**
   * Calls the get_average_votes_per_proposal()uint64 ABI method.
   *
   * Get average number of votes per proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getAverageVotesPerProposal(args: MethodArgs<'get_average_votes_per_proposal()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getAverageVotesPerProposal(args, params))
  }

  /**
   * Calls the get_voter_influence_score(address)uint64 ABI method.
   *
   * Get influence score for a specific voter (0-100) based on voting power
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoterInfluenceScore(args: MethodArgs<'get_voter_influence_score(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoterInfluenceScore(args, params))
  }

  /**
   * Calls the get_voter_engagement_score(address)uint64 ABI method.
   *
   * Get engagement score for a specific voter (0-100) based on actual participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoterEngagementScore(args: MethodArgs<'get_voter_engagement_score(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoterEngagementScore(args, params))
  }

  /**
   * Calls the has_voter_participated_in_proposal(address,byte[32])bool ABI method.
   *
   * Check if a voter has participated in a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public hasVoterParticipatedInProposal(args: MethodArgs<'has_voter_participated_in_proposal(address,byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.hasVoterParticipatedInProposal(args, params))
  }

  /**
   * Calls the get_voter_participation_timestamp(address,byte[32])uint64 ABI method.
   *
   * Get the timestamp when a voter participated in a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoterParticipationTimestamp(args: MethodArgs<'get_voter_participation_timestamp(address,byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoterParticipationTimestamp(args, params))
  }

  /**
   * Calls the get_voter_proposal_count(address)uint64 ABI method.
   *
   * Get the number of proposals a voter has participated in
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoterProposalCount(args: MethodArgs<'get_voter_proposal_count(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoterProposalCount(args, params))
  }

  /**
   * Calls the get_voter_last_proposal_node(address)byte[32] ABI method.
   *
   * Get the node of the last proposal this voter participated in
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoterLastProposalNode(args: MethodArgs<'get_voter_last_proposal_node(address)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoterLastProposalNode(args, params))
  }

  /**
   * Calls the get_quorum_requirement()uint256 ABI method.
   *
   * Get the global quorum requirement in basis points (bps) with base of 10000
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getQuorumRequirement(args: MethodArgs<'get_quorum_requirement()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getQuorumRequirement(args, params))
  }

  /**
   * Calls the get_quorum_threshold()uint256 ABI method.
   *
   * Get the current quorum threshold in voting power units
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getQuorumThreshold(args: MethodArgs<'get_quorum_threshold()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getQuorumThreshold(args, params))
  }

  /**
   * Calls the check_proposal_quorum(byte[32])bool ABI method.
   *
   * Check if a proposal meets the quorum requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkProposalQuorum(args: MethodArgs<'check_proposal_quorum(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.checkProposalQuorum(args, params))
  }

  /**
   * Calls the get_proposal_quorum_status(byte[32])uint64 ABI method.
   *
   * Get quorum status for a proposal: 0 = not met, 1 = met, 2 = exceeded
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposalQuorumStatus(args: MethodArgs<'get_proposal_quorum_status(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposalQuorumStatus(args, params))
  }

  /**
   * Calls the get_proposal_quorum_progress(byte[32])uint64 ABI method.
   *
   * Get quorum progress as percentage (0-10000 bps) for a proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposalQuorumProgress(args: MethodArgs<'get_proposal_quorum_progress(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposalQuorumProgress(args, params))
  }

  /**
   * Calls the get_proposal_quorum_threshold(byte[32])uint64 ABI method.
   *
   * Get the quorum threshold for a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProposalQuorumThreshold(args: MethodArgs<'get_proposal_quorum_threshold(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getProposalQuorumThreshold(args, params))
  }

  /**
   * Calls the get_lockup_bonus_multiplier(uint64)uint64 ABI method.
   *
   * Get the bonus multiplier for a given lockup duration in seconds
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLockupBonusMultiplier(args: MethodArgs<'get_lockup_bonus_multiplier(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getLockupBonusMultiplier(args, params))
  }

  /**
   * Calls the get_lockup_tier_info(uint64)uint64 ABI method.
   *
   * Get the lockup tier (1-5) for a given duration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLockupTierInfo(args: MethodArgs<'get_lockup_tier_info(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getLockupTierInfo(args, params))
  }

  /**
   * Calls the calculate_potential_power_granted(uint64,uint256,uint64)uint256 ABI method.
   *
   * Calculate potential voting power granted for a given lockup scenario
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public calculatePotentialPowerGranted(args: MethodArgs<'calculate_potential_power_granted(uint64,uint256,uint64)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.calculatePotentialPowerGranted(args, params))
  }

  /**
   * Calls the get_lockup_tier_duration(uint64)uint64 ABI method.
   *
   * Get the minimum duration required for a specific lockup tier
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLockupTierDuration(args: MethodArgs<'get_lockup_tier_duration(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getLockupTierDuration(args, params))
  }

  /**
   * Calls the get_lockup_tier_bonus(uint64)uint64 ABI method.
   *
   * Get the bonus multiplier for a specific lockup tier
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getLockupTierBonus(args: MethodArgs<'get_lockup_tier_bonus(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getLockupTierBonus(args, params))
  }

  /**
   * Calls the get_power_lock_info(uint64,uint64)uint64 ABI method.
   *
   * Get comprehensive lockup information for a power lock
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPowerLockInfo(args: MethodArgs<'get_power_lock_info(uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getPowerLockInfo(args, params))
  }

  /**
   * Calls the get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoter(args: MethodArgs<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getVoter(args, params), Voter)
  }

  /**
   * Calls the check_proposal_activation(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public checkProposalActivation(args: MethodArgs<'check_proposal_activation(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.checkProposalActivation(args, params))
  }

  /**
   * Calls the get_election_node(byte[64],byte[512])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getElectionNode(args: MethodArgs<'get_election_node(byte[64],byte[512])byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getElectionNode(args, params))
  }

  /**
   * Calls the get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getElection(args: MethodArgs<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getElection(args, params), ElectionProposal)
  }

  /**
   * Calls the propose_election(byte[64],byte[512],uint64,uint64)byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public proposeElection(args: MethodArgs<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.proposeElection(args, params))
  }

  /**
   * Calls the endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public endorseCandidates(args: MethodArgs<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.endorseCandidates(args, params))
  }

  /**
   * Calls the get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCandidateEndorsement(args: MethodArgs<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getCandidateEndorsement(args, params), Endorsement)
  }

  /**
   * Calls the get_endorsement(byte[32],address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEndorsement(args: MethodArgs<'get_endorsement(byte[32],address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.getEndorsement(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.transfer(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PowGovernanceCallFactory.grantUpgrader(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<PowGovernance['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get activationThreshold() {
        return PowGovernanceClient.getBinaryState(state, 'activation_threshold')
      },
      get activeProposalCount() {
        return PowGovernanceClient.getIntegerState(state, 'active_proposal_count')
      },
      get contractVersion() {
        return PowGovernanceClient.getIntegerState(state, 'contract_version')
      },
      get deploymentVersion() {
        return PowGovernanceClient.getIntegerState(state, 'deployment_version')
      },
      get electionCount() {
        return PowGovernanceClient.getIntegerState(state, 'election_count')
      },
      get endorsementCount() {
        return PowGovernanceClient.getIntegerState(state, 'endorsement_count')
      },
      get finalizedProposalCount() {
        return PowGovernanceClient.getIntegerState(state, 'finalized_proposal_count')
      },
      get owner() {
        return PowGovernanceClient.getBinaryState(state, 'owner')
      },
      get proposalCount() {
        return PowGovernanceClient.getIntegerState(state, 'proposal_count')
      },
      get quorumRequirement() {
        return PowGovernanceClient.getBinaryState(state, 'quorum_requirement')
      },
      get totalParticipatingVoters() {
        return PowGovernanceClient.getIntegerState(state, 'total_participating_voters')
      },
      get totalParticipationPower() {
        return PowGovernanceClient.getBinaryState(state, 'total_participation_power')
      },
      get totalVoterCount() {
        return PowGovernanceClient.getIntegerState(state, 'total_voter_count')
      },
      get totalVotingPower() {
        return PowGovernanceClient.getBinaryState(state, 'total_voting_power')
      },
      get treasuryAppId() {
        return PowGovernanceClient.getIntegerState(state, 'treasury_app_id')
      },
      get updatable() {
        return PowGovernanceClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return PowGovernanceClient.getBinaryState(state, 'upgrader')
      },
      get voteCount() {
        return PowGovernanceClient.getIntegerState(state, 'vote_count')
      },
    }
  }

  public compose(): PowGovernanceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      vetoProposal(args: MethodArgs<'veto_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.vetoProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      executeProposal(args: MethodArgs<'execute_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.executeProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      queueProposal(args: MethodArgs<'queue_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.queueProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      finalizeProposal(args: MethodArgs<'finalize_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.finalizeProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cancelProposal(args: MethodArgs<'cancel_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cancelProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setQuorumRequirement(args: MethodArgs<'set_quorum_requirement(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setQuorumRequirement(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateTotalVotingPower(args: MethodArgs<'update_total_voting_power(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateTotalVotingPower(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addPowerSource(args: MethodArgs<'add_power_source(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addPowerSource(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPowerSource(args: MethodArgs<'get_power_source(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPowerSource(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(PowerSource)
        return this
      },
      updatePowerSource(args: MethodArgs<'update_power_source(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updatePowerSource(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      lockPower(args: MethodArgs<'lock_power(uint64,uint256,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.lockPower(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPowerLock(args: MethodArgs<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPowerLock(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(PowerLock)
        return this
      },
      unlockPower(args: MethodArgs<'unlock_power(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unlockPower(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposalNode(args: MethodArgs<'get_proposal_node(byte[64],byte[512])byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposalNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposal(args: MethodArgs<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Proposal)
        return this
      },
      getVote(args: MethodArgs<'get_vote(byte[32],address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      propose(args: MethodArgs<'propose(byte[64],byte[512],uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.propose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      activateProposal(args: MethodArgs<'activate_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.activateProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      castVote(args: MethodArgs<'cast_vote(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.castVote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rejectProposal(args: MethodArgs<'reject_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rejectProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getActiveProposalCount(args: MethodArgs<'get_active_proposal_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getActiveProposalCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTotalVoterCount(args: MethodArgs<'get_total_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTotalVoterCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getParticipationRate(args: MethodArgs<'get_participation_rate()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getParticipationRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposalParticipationRate(args: MethodArgs<'get_proposal_participation_rate(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposalParticipationRate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getEligibleVoterCount(args: MethodArgs<'get_eligible_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEligibleVoterCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getParticipatingVoterCount(args: MethodArgs<'get_participating_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getParticipatingVoterCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getFinalizedProposalCount(args: MethodArgs<'get_finalized_proposal_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getFinalizedProposalCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAverageParticipationPerProposal(args: MethodArgs<'get_average_participation_per_proposal()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAverageParticipationPerProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAverageVotesPerProposal(args: MethodArgs<'get_average_votes_per_proposal()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAverageVotesPerProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoterInfluenceScore(args: MethodArgs<'get_voter_influence_score(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoterInfluenceScore(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoterEngagementScore(args: MethodArgs<'get_voter_engagement_score(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoterEngagementScore(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      hasVoterParticipatedInProposal(args: MethodArgs<'has_voter_participated_in_proposal(address,byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.hasVoterParticipatedInProposal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoterParticipationTimestamp(args: MethodArgs<'get_voter_participation_timestamp(address,byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoterParticipationTimestamp(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoterProposalCount(args: MethodArgs<'get_voter_proposal_count(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoterProposalCount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoterLastProposalNode(args: MethodArgs<'get_voter_last_proposal_node(address)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoterLastProposalNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getQuorumRequirement(args: MethodArgs<'get_quorum_requirement()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getQuorumRequirement(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getQuorumThreshold(args: MethodArgs<'get_quorum_threshold()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getQuorumThreshold(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      checkProposalQuorum(args: MethodArgs<'check_proposal_quorum(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkProposalQuorum(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposalQuorumStatus(args: MethodArgs<'get_proposal_quorum_status(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposalQuorumStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposalQuorumProgress(args: MethodArgs<'get_proposal_quorum_progress(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposalQuorumProgress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProposalQuorumThreshold(args: MethodArgs<'get_proposal_quorum_threshold(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProposalQuorumThreshold(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLockupBonusMultiplier(args: MethodArgs<'get_lockup_bonus_multiplier(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLockupBonusMultiplier(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLockupTierInfo(args: MethodArgs<'get_lockup_tier_info(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLockupTierInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      calculatePotentialPowerGranted(args: MethodArgs<'calculate_potential_power_granted(uint64,uint256,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.calculatePotentialPowerGranted(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLockupTierDuration(args: MethodArgs<'get_lockup_tier_duration(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLockupTierDuration(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getLockupTierBonus(args: MethodArgs<'get_lockup_tier_bonus(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getLockupTierBonus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPowerLockInfo(args: MethodArgs<'get_power_lock_info(uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPowerLockInfo(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoter(args: MethodArgs<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoter(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Voter)
        return this
      },
      checkProposalActivation(args: MethodArgs<'check_proposal_activation(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.checkProposalActivation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getElectionNode(args: MethodArgs<'get_election_node(byte[64],byte[512])byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getElectionNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getElection(args: MethodArgs<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getElection(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(ElectionProposal)
        return this
      },
      proposeElection(args: MethodArgs<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.proposeElection(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      endorseCandidates(args: MethodArgs<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.endorseCandidates(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getCandidateEndorsement(args: MethodArgs<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCandidateEndorsement(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Endorsement)
        return this
      },
      getEndorsement(args: MethodArgs<'get_endorsement(byte[32],address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEndorsement(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PowGovernanceComposer
  }
}
export type PowGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the veto_proposal(byte[32])void ABI method.
   *
   * Veto a queued proposal - only owner can veto
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vetoProposal(args: MethodArgs<'veto_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'veto_proposal(byte[32])void'>]>

  /**
   * Calls the execute_proposal(byte[32])void ABI method.
   *
   * Execute a queued proposal - only owner can execute
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeProposal(args: MethodArgs<'execute_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'execute_proposal(byte[32])void'>]>

  /**
   * Calls the queue_proposal(byte[32])void ABI method.
   *
   * Queue a succeeded proposal for execution - only owner can queue
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  queueProposal(args: MethodArgs<'queue_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'queue_proposal(byte[32])void'>]>

  /**
   * Calls the finalize_proposal(byte[32])void ABI method.
   *
   * Finalize a proposal after voting period ends - only owner can finalize
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeProposal(args: MethodArgs<'finalize_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'finalize_proposal(byte[32])void'>]>

  /**
   * Calls the cancel_proposal(byte[32])void ABI method.
   *
   * Cancel a pending proposal - only owner can cancel
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelProposal(args: MethodArgs<'cancel_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'cancel_proposal(byte[32])void'>]>

  /**
   * Calls the set_quorum_requirement(uint256)void ABI method.
   *
   * Set the global quorum requirement - only owner can set
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setQuorumRequirement(args: MethodArgs<'set_quorum_requirement(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'set_quorum_requirement(uint256)void'>]>

  /**
   * Calls the update_total_voting_power(uint256)void ABI method.
   *
   * Update the total voting power - only owner can update
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTotalVotingPower(args: MethodArgs<'update_total_voting_power(uint256)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'update_total_voting_power(uint256)void'>]>

  /**
   * Calls the add_power_source(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPowerSource(args: MethodArgs<'add_power_source(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'add_power_source(uint64,uint64)void'>]>

  /**
   * Calls the get_power_source(uint64)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPowerSource(args: MethodArgs<'get_power_source(uint64)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_power_source(uint64)(uint64,uint64)'>]>

  /**
   * Calls the update_power_source(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePowerSource(args: MethodArgs<'update_power_source(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'update_power_source(uint64,uint64)void'>]>

  /**
   * Calls the lock_power(uint64,uint256,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  lockPower(args: MethodArgs<'lock_power(uint64,uint256,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'lock_power(uint64,uint256,uint64)void'>]>

  /**
   * Calls the get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPowerLock(args: MethodArgs<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_power_lock(uint64,uint64)(uint64,uint256,uint64,address,uint256,uint64,uint64)'>]>

  /**
   * Calls the unlock_power(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unlockPower(args: MethodArgs<'unlock_power(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'unlock_power(uint64,uint64)void'>]>

  /**
   * Calls the get_proposal_node(byte[64],byte[512])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalNode(args: MethodArgs<'get_proposal_node(byte[64],byte[512])byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal_node(byte[64],byte[512])byte[32]'>]>

  /**
   * Calls the get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposal(args: MethodArgs<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint256,uint256,uint64,uint64,uint64,byte[32],uint64,uint64,uint64,uint64,bool,uint64,uint256)'>]>

  /**
   * Calls the get_vote(byte[32],address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVote(args: MethodArgs<'get_vote(byte[32],address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_vote(byte[32],address)uint64'>]>

  /**
   * Calls the propose(byte[64],byte[512],uint64,uint64)byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  propose(args: MethodArgs<'propose(byte[64],byte[512],uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'propose(byte[64],byte[512],uint64,uint64)byte[32]'>]>

  /**
   * Calls the activate_proposal(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  activateProposal(args: MethodArgs<'activate_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'activate_proposal(byte[32])void'>]>

  /**
   * Calls the cast_vote(byte[32],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  castVote(args: MethodArgs<'cast_vote(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'cast_vote(byte[32],uint64)void'>]>

  /**
   * Calls the reject_proposal(byte[32])void ABI method.
   *
   * Check if a pending proposal should be rejected due to insufficient activation votes
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectProposal(args: MethodArgs<'reject_proposal(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'reject_proposal(byte[32])void'>]>

  /**
   * Calls the get_active_proposal_count()uint64 ABI method.
   *
   * Get the current number of active proposals
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getActiveProposalCount(args: MethodArgs<'get_active_proposal_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_active_proposal_count()uint64'>]>

  /**
   * Calls the get_total_voter_count()uint64 ABI method.
   *
   * Get the current number of unique voters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalVoterCount(args: MethodArgs<'get_total_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_total_voter_count()uint64'>]>

  /**
   * Calls the get_participation_rate()uint64 ABI method.
   *
   * Get the current participation rate as a percentage (0-100)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParticipationRate(args: MethodArgs<'get_participation_rate()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_participation_rate()uint64'>]>

  /**
   * Calls the get_proposal_participation_rate(byte[32])uint64 ABI method.
   *
   * Get participation rate for a specific proposal as a percentage (0-100)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalParticipationRate(args: MethodArgs<'get_proposal_participation_rate(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal_participation_rate(byte[32])uint64'>]>

  /**
   * Calls the get_eligible_voter_count()uint64 ABI method.
   *
   * Get the number of voters with voting power > 0
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEligibleVoterCount(args: MethodArgs<'get_eligible_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_eligible_voter_count()uint64'>]>

  /**
   * Calls the get_participating_voter_count()uint64 ABI method.
   *
   * Get the number of voters who have actually participated in voting
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParticipatingVoterCount(args: MethodArgs<'get_participating_voter_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_participating_voter_count()uint64'>]>

  /**
   * Calls the get_finalized_proposal_count()uint64 ABI method.
   *
   * Get the number of proposals that have been finalized
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getFinalizedProposalCount(args: MethodArgs<'get_finalized_proposal_count()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_finalized_proposal_count()uint64'>]>

  /**
   * Calls the get_average_participation_per_proposal()uint64 ABI method.
   *
   * Get average participation power per finalized proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAverageParticipationPerProposal(args: MethodArgs<'get_average_participation_per_proposal()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_average_participation_per_proposal()uint64'>]>

  /**
   * Calls the get_average_votes_per_proposal()uint64 ABI method.
   *
   * Get average number of votes per proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAverageVotesPerProposal(args: MethodArgs<'get_average_votes_per_proposal()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_average_votes_per_proposal()uint64'>]>

  /**
   * Calls the get_voter_influence_score(address)uint64 ABI method.
   *
   * Get influence score for a specific voter (0-100) based on voting power
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoterInfluenceScore(args: MethodArgs<'get_voter_influence_score(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter_influence_score(address)uint64'>]>

  /**
   * Calls the get_voter_engagement_score(address)uint64 ABI method.
   *
   * Get engagement score for a specific voter (0-100) based on actual participation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoterEngagementScore(args: MethodArgs<'get_voter_engagement_score(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter_engagement_score(address)uint64'>]>

  /**
   * Calls the has_voter_participated_in_proposal(address,byte[32])bool ABI method.
   *
   * Check if a voter has participated in a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasVoterParticipatedInProposal(args: MethodArgs<'has_voter_participated_in_proposal(address,byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'has_voter_participated_in_proposal(address,byte[32])bool'>]>

  /**
   * Calls the get_voter_participation_timestamp(address,byte[32])uint64 ABI method.
   *
   * Get the timestamp when a voter participated in a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoterParticipationTimestamp(args: MethodArgs<'get_voter_participation_timestamp(address,byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter_participation_timestamp(address,byte[32])uint64'>]>

  /**
   * Calls the get_voter_proposal_count(address)uint64 ABI method.
   *
   * Get the number of proposals a voter has participated in
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoterProposalCount(args: MethodArgs<'get_voter_proposal_count(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter_proposal_count(address)uint64'>]>

  /**
   * Calls the get_voter_last_proposal_node(address)byte[32] ABI method.
   *
   * Get the node of the last proposal this voter participated in
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoterLastProposalNode(args: MethodArgs<'get_voter_last_proposal_node(address)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter_last_proposal_node(address)byte[32]'>]>

  /**
   * Calls the get_quorum_requirement()uint256 ABI method.
   *
   * Get the global quorum requirement in basis points (bps) with base of 10000
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getQuorumRequirement(args: MethodArgs<'get_quorum_requirement()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_quorum_requirement()uint256'>]>

  /**
   * Calls the get_quorum_threshold()uint256 ABI method.
   *
   * Get the current quorum threshold in voting power units
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getQuorumThreshold(args: MethodArgs<'get_quorum_threshold()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_quorum_threshold()uint256'>]>

  /**
   * Calls the check_proposal_quorum(byte[32])bool ABI method.
   *
   * Check if a proposal meets the quorum requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkProposalQuorum(args: MethodArgs<'check_proposal_quorum(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'check_proposal_quorum(byte[32])bool'>]>

  /**
   * Calls the get_proposal_quorum_status(byte[32])uint64 ABI method.
   *
   * Get quorum status for a proposal: 0 = not met, 1 = met, 2 = exceeded
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalQuorumStatus(args: MethodArgs<'get_proposal_quorum_status(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal_quorum_status(byte[32])uint64'>]>

  /**
   * Calls the get_proposal_quorum_progress(byte[32])uint64 ABI method.
   *
   * Get quorum progress as percentage (0-10000 bps) for a proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalQuorumProgress(args: MethodArgs<'get_proposal_quorum_progress(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal_quorum_progress(byte[32])uint64'>]>

  /**
   * Calls the get_proposal_quorum_threshold(byte[32])uint64 ABI method.
   *
   * Get the quorum threshold for a specific proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalQuorumThreshold(args: MethodArgs<'get_proposal_quorum_threshold(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_proposal_quorum_threshold(byte[32])uint64'>]>

  /**
   * Calls the get_lockup_bonus_multiplier(uint64)uint64 ABI method.
   *
   * Get the bonus multiplier for a given lockup duration in seconds
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLockupBonusMultiplier(args: MethodArgs<'get_lockup_bonus_multiplier(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_lockup_bonus_multiplier(uint64)uint64'>]>

  /**
   * Calls the get_lockup_tier_info(uint64)uint64 ABI method.
   *
   * Get the lockup tier (1-5) for a given duration
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLockupTierInfo(args: MethodArgs<'get_lockup_tier_info(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_lockup_tier_info(uint64)uint64'>]>

  /**
   * Calls the calculate_potential_power_granted(uint64,uint256,uint64)uint256 ABI method.
   *
   * Calculate potential voting power granted for a given lockup scenario
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePotentialPowerGranted(args: MethodArgs<'calculate_potential_power_granted(uint64,uint256,uint64)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'calculate_potential_power_granted(uint64,uint256,uint64)uint256'>]>

  /**
   * Calls the get_lockup_tier_duration(uint64)uint64 ABI method.
   *
   * Get the minimum duration required for a specific lockup tier
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLockupTierDuration(args: MethodArgs<'get_lockup_tier_duration(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_lockup_tier_duration(uint64)uint64'>]>

  /**
   * Calls the get_lockup_tier_bonus(uint64)uint64 ABI method.
   *
   * Get the bonus multiplier for a specific lockup tier
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLockupTierBonus(args: MethodArgs<'get_lockup_tier_bonus(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_lockup_tier_bonus(uint64)uint64'>]>

  /**
   * Calls the get_power_lock_info(uint64,uint64)uint64 ABI method.
   *
   * Get comprehensive lockup information for a power lock
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPowerLockInfo(args: MethodArgs<'get_power_lock_info(uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_power_lock_info(uint64,uint64)uint64'>]>

  /**
   * Calls the get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoter(args: MethodArgs<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_voter(address)(address,uint256,uint64,uint64,uint64,byte[32])'>]>

  /**
   * Calls the check_proposal_activation(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkProposalActivation(args: MethodArgs<'check_proposal_activation(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'check_proposal_activation(byte[32])void'>]>

  /**
   * Calls the get_election_node(byte[64],byte[512])byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getElectionNode(args: MethodArgs<'get_election_node(byte[64],byte[512])byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_election_node(byte[64],byte[512])byte[32]'>]>

  /**
   * Calls the get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getElection(args: MethodArgs<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_election(byte[32])(uint64,uint64,address,byte[64],byte[512],byte[32],uint64,uint64,uint64,uint64,uint256,uint64)'>]>

  /**
   * Calls the propose_election(byte[64],byte[512],uint64,uint64)byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  proposeElection(args: MethodArgs<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'propose_election(byte[64],byte[512],uint64,uint64)byte[32]'>]>

  /**
   * Calls the endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  endorseCandidates(args: MethodArgs<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'endorse_candidates(byte[32],byte[32],byte[32],byte[32],byte[32],byte[32])void'>]>

  /**
   * Calls the get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCandidateEndorsement(args: MethodArgs<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_candidate_endorsement(byte[32],byte[32])(byte[32],byte[32],byte[32],uint64,uint256,uint64)'>]>

  /**
   * Calls the get_endorsement(byte[32],address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEndorsement(args: MethodArgs<'get_endorsement(byte[32],address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'get_endorsement(byte[32],address)bool'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the PowGovernance smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PowGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PowGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PowGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PowGovernanceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PowGovernanceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PowGovernanceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PowGovernanceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
