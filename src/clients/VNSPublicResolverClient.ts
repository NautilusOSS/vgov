/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_update(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "killApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "deleteAddr(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setName(byte[32],byte[256])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteName(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "name(byte[32])byte[256]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addr(byte[32])address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddr(byte[32],address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setText(byte[32],byte[22],byte[256])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteText(byte[32],byte[22])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "text(byte[32],byte[22])byte[256]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clearRecords(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "recordVersions(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNQdWJsaWNSZXNvbHZlci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNTc0LTI1NzYKICAgIC8vIGNsYXNzIFZOU1B1YmxpY1Jlc29sdmVyKAogICAgLy8gICAgIFZOU05hbWVSZXNvbHZlciwgVk5TQWRkclJlc29sdmVyLCBWTlNUZXh0UmVzb2x2ZXIsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUKICAgIC8vICk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        },
        "vns": {
          "type": "uint64",
          "key": "vns"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "VNSPublicResolver",
    "methods": [
      {
        "name": "post_update",
        "args": [
          {
            "type": "uint64",
            "name": "vns"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "killApplication",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteAddr",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setName",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[256]",
            "name": "newName"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteName",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "name",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "byte[256]"
        },
        "desc": "Get the name for a node"
      },
      {
        "name": "addr",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "setAddr",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "address",
            "name": "newAddress"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setText",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[22]",
            "name": "key"
          },
          {
            "type": "byte[256]",
            "name": "value"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteText",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[22]",
            "name": "key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "text",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[22]",
            "name": "key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[256]"
        },
        "desc": "Get the text for a node"
      },
      {
        "name": "clearRecords",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "recordVersions",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the version for a node"
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the VnsPublicResolver smart contract.
 */
export type VnsPublicResolver = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_update(uint64)void' | 'post_update', {
      argsObj: {
        vns: bigint | number
      }
      argsTuple: [vns: bigint | number]
      returns: void
    }>
    & Record<'killApplication()void' | 'killApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteAddr(byte[32])void' | 'deleteAddr', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: void
    }>
    & Record<'setName(byte[32],byte[256])void' | 'setName', {
      argsObj: {
        node: Uint8Array
        newName: Uint8Array
      }
      argsTuple: [node: Uint8Array, newName: Uint8Array]
      returns: void
    }>
    & Record<'deleteName(byte[32])void' | 'deleteName', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: void
    }>
    & Record<'name(byte[32])byte[256]' | 'name', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: Uint8Array
    }>
    & Record<'addr(byte[32])address' | 'addr', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: string
    }>
    & Record<'setAddr(byte[32],address)void' | 'setAddr', {
      argsObj: {
        node: Uint8Array
        newAddress: string
      }
      argsTuple: [node: Uint8Array, newAddress: string]
      returns: void
    }>
    & Record<'setText(byte[32],byte[22],byte[256])void' | 'setText', {
      argsObj: {
        node: Uint8Array
        key: Uint8Array
        value: Uint8Array
      }
      argsTuple: [node: Uint8Array, key: Uint8Array, value: Uint8Array]
      returns: void
    }>
    & Record<'deleteText(byte[32],byte[22])void' | 'deleteText', {
      argsObj: {
        node: Uint8Array
        key: Uint8Array
      }
      argsTuple: [node: Uint8Array, key: Uint8Array]
      returns: void
    }>
    & Record<'text(byte[32],byte[22])byte[256]' | 'text', {
      argsObj: {
        node: Uint8Array
        key: Uint8Array
      }
      argsTuple: [node: Uint8Array, key: Uint8Array]
      returns: Uint8Array
    }>
    & Record<'clearRecords(byte[32])void' | 'clearRecords', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: void
    }>
    & Record<'recordVersions(byte[32])uint64' | 'recordVersions', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: bigint
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      owner?: BinaryState
      stakeable?: IntegerState
      updatable?: IntegerState
      upgrader?: BinaryState
      vns?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VnsPublicResolverSig = keyof VnsPublicResolver['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VnsPublicResolverSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the VnsPublicResolver smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VnsPublicResolverSig> = VnsPublicResolver['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VnsPublicResolver smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VnsPublicResolverSig> = VnsPublicResolver['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VnsPublicResolverCreateCalls = (typeof VnsPublicResolverCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VnsPublicResolverCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type VnsPublicResolverUpdateCalls = (typeof VnsPublicResolverCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type VnsPublicResolverUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type VnsPublicResolverDeleteCalls = (typeof VnsPublicResolverCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type VnsPublicResolverDeleteCallParams =
  | TypedCallParams<'killApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type VnsPublicResolverDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VnsPublicResolverCreateCalls) => VnsPublicResolverCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: VnsPublicResolverUpdateCalls) => VnsPublicResolverUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: VnsPublicResolverDeleteCalls) => VnsPublicResolverDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VnsPublicResolverCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VNSPublicResolver smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the VNSPublicResolver smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the VNSPublicResolver smart contract using the killApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'killApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_update(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_update(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vns],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteAddr(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteAddr(args: MethodArgs<'deleteAddr(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteAddr(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setName(byte[32],byte[256])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setName(args: MethodArgs<'setName(byte[32],byte[256])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setName(byte[32],byte[256])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.newName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteName(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteName(args: MethodArgs<'deleteName(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteName(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the name(byte[32])byte[256] ABI method
   *
   * Get the name for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static name(args: MethodArgs<'name(byte[32])byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'name(byte[32])byte[256]' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addr(byte[32])address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addr(args: MethodArgs<'addr(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addr(byte[32])address' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddr(byte[32],address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddr(byte[32],address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.newAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setText(byte[32],byte[22],byte[256])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setText(args: MethodArgs<'setText(byte[32],byte[22],byte[256])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setText(byte[32],byte[22],byte[256])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.key, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteText(byte[32],byte[22])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteText(args: MethodArgs<'deleteText(byte[32],byte[22])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteText(byte[32],byte[22])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the text(byte[32],byte[22])byte[256] ABI method
   *
   * Get the text for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static text(args: MethodArgs<'text(byte[32],byte[22])byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'text(byte[32],byte[22])byte[256]' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clearRecords(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clearRecords(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the recordVersions(byte[32])uint64 ABI method
   *
   * Get the version for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'recordVersions(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VNSPublicResolver smart contract
 */
export class VnsPublicResolverClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VnsPublicResolverClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VnsPublicResolver['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VNSPublicResolver smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VnsPublicResolverDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VnsPublicResolverCallFactory.create)
    const updateArgs = params.updateCall?.(VnsPublicResolverCallFactory.update)
    const deleteArgs = params.deleteCall?.(VnsPublicResolverCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VNSPublicResolver smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the VNSPublicResolver smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the VNSPublicResolver smart contract using the killApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'killApplication()void'>>(await $this.appClient.delete(VnsPublicResolverCallFactory.delete.killApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VNSPublicResolver smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.postUpdate(args, params))
  }

  /**
   * Calls the deleteAddr(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteAddr(args: MethodArgs<'deleteAddr(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.deleteAddr(args, params))
  }

  /**
   * Calls the setName(byte[32],byte[256])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setName(args: MethodArgs<'setName(byte[32],byte[256])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setName(args, params))
  }

  /**
   * Calls the deleteName(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteName(args: MethodArgs<'deleteName(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.deleteName(args, params))
  }

  /**
   * Calls the name(byte[32])byte[256] ABI method.
   *
   * Get the name for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public name(args: MethodArgs<'name(byte[32])byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.name(args, params))
  }

  /**
   * Calls the addr(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addr(args: MethodArgs<'addr(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.addr(args, params))
  }

  /**
   * Calls the setAddr(byte[32],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setAddr(args, params))
  }

  /**
   * Calls the setText(byte[32],byte[22],byte[256])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setText(args: MethodArgs<'setText(byte[32],byte[22],byte[256])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setText(args, params))
  }

  /**
   * Calls the deleteText(byte[32],byte[22])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteText(args: MethodArgs<'deleteText(byte[32],byte[22])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.deleteText(args, params))
  }

  /**
   * Calls the text(byte[32],byte[22])byte[256] ABI method.
   *
   * Get the text for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public text(args: MethodArgs<'text(byte[32],byte[22])byte[256]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.text(args, params))
  }

  /**
   * Calls the clearRecords(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.clearRecords(args, params))
  }

  /**
   * Calls the recordVersions(byte[32])uint64 ABI method.
   *
   * Get the version for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.recordVersions(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<VnsPublicResolver['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return VnsPublicResolverClient.getIntegerState(state, 'contract_version')
      },
      get delegate() {
        return VnsPublicResolverClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return VnsPublicResolverClient.getIntegerState(state, 'deployment_version')
      },
      get owner() {
        return VnsPublicResolverClient.getBinaryState(state, 'owner')
      },
      get stakeable() {
        return VnsPublicResolverClient.getIntegerState(state, 'stakeable')
      },
      get updatable() {
        return VnsPublicResolverClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return VnsPublicResolverClient.getBinaryState(state, 'upgrader')
      },
      get vns() {
        return VnsPublicResolverClient.getIntegerState(state, 'vns')
      },
    }
  }

  public compose(): VnsPublicResolverComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteAddr(args: MethodArgs<'deleteAddr(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setName(args: MethodArgs<'setName(byte[32],byte[256])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteName(args: MethodArgs<'deleteName(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      name(args: MethodArgs<'name(byte[32])byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addr(args: MethodArgs<'addr(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setText(args: MethodArgs<'setText(byte[32],byte[22],byte[256])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setText(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteText(args: MethodArgs<'deleteText(byte[32],byte[22])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteText(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      text(args: MethodArgs<'text(byte[32],byte[22])byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.text(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearRecords(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.recordVersions(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.killApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VnsPublicResolverComposer
  }
}
export type VnsPublicResolverComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'post_update(uint64)void'>]>

  /**
   * Calls the deleteAddr(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteAddr(args: MethodArgs<'deleteAddr(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'deleteAddr(byte[32])void'>]>

  /**
   * Calls the setName(byte[32],byte[256])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setName(args: MethodArgs<'setName(byte[32],byte[256])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'setName(byte[32],byte[256])void'>]>

  /**
   * Calls the deleteName(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteName(args: MethodArgs<'deleteName(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'deleteName(byte[32])void'>]>

  /**
   * Calls the name(byte[32])byte[256] ABI method.
   *
   * Get the name for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  name(args: MethodArgs<'name(byte[32])byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'name(byte[32])byte[256]'>]>

  /**
   * Calls the addr(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addr(args: MethodArgs<'addr(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'addr(byte[32])address'>]>

  /**
   * Calls the setAddr(byte[32],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'setAddr(byte[32],address)void'>]>

  /**
   * Calls the setText(byte[32],byte[22],byte[256])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setText(args: MethodArgs<'setText(byte[32],byte[22],byte[256])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'setText(byte[32],byte[22],byte[256])void'>]>

  /**
   * Calls the deleteText(byte[32],byte[22])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteText(args: MethodArgs<'deleteText(byte[32],byte[22])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'deleteText(byte[32],byte[22])void'>]>

  /**
   * Calls the text(byte[32],byte[22])byte[256] ABI method.
   *
   * Get the text for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  text(args: MethodArgs<'text(byte[32],byte[22])byte[256]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'text(byte[32],byte[22])byte[256]'>]>

  /**
   * Calls the clearRecords(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'clearRecords(byte[32])void'>]>

  /**
   * Calls the recordVersions(byte[32])uint64 ABI method.
   *
   * Get the version for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'recordVersions(byte[32])uint64'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the VNSPublicResolver smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VNSPublicResolver smart contract using the killApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams): VnsPublicResolverComposer<[...TReturns, MethodReturn<'killApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VNSPublicResolver smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VnsPublicResolverComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<VnsPublicResolverComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<VnsPublicResolverComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type VnsPublicResolverComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type VnsPublicResolverComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
