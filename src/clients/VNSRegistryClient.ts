/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_update(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRegistryResolver(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "killApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "killNode(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "killOperator(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteBox(byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRecord(byte[32],address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSubnodeOwner(byte[32],byte[32],address)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setResolver(byte[32],uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setOwner(byte[32],address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTTL(byte[32],uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getApproved(byte[32])address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ownerOf(byte[32])address": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "resolver(byte[32])uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ttl(byte[32])uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "recordExists(byte[32])bool": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isApprovedForAll(address,address)bool": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNSZWdpc3RyeS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTk4CiAgICAvLyBjbGFzcyBWTlNSZWdpc3RyeShWTlMsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "registry_resolver": {
          "type": "uint64",
          "key": "registry_resolver"
        },
        "registry_ttl": {
          "type": "uint64",
          "key": "registry_ttl"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "VNSRegistry",
    "methods": [
      {
        "name": "post_update",
        "args": [
          {
            "type": "uint64",
            "name": "resolver"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setRegistryResolver",
        "args": [
          {
            "type": "uint64",
            "name": "resolver"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "killApplication",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "killNode",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "killOperator",
        "args": [
          {
            "type": "address",
            "name": "operator"
          },
          {
            "type": "address",
            "name": "owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteBox",
        "args": [
          {
            "type": "byte[]",
            "name": "key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setRecord",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "uint64",
            "name": "resolver"
          },
          {
            "type": "uint64",
            "name": "ttl"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setSubnodeRecord",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[32]",
            "name": "label"
          },
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "uint64",
            "name": "resolver"
          },
          {
            "type": "uint64",
            "name": "ttl"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the record for a subnode"
      },
      {
        "name": "setSubnodeOwner",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "byte[32]",
            "name": "label"
          },
          {
            "type": "address",
            "name": "owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "byte[32]"
        },
        "desc": "Set the owner of a subnode"
      },
      {
        "name": "setResolver",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "uint64",
            "name": "resolver"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the resolver for a node"
      },
      {
        "name": "setOwner",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "address",
            "name": "owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the owner of a node"
      },
      {
        "name": "setTTL",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "uint64",
            "name": "ttl"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the TTL for a node"
      },
      {
        "name": "setApprovalForAll",
        "args": [
          {
            "type": "address",
            "name": "operator"
          },
          {
            "type": "bool",
            "name": "approved"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve",
        "args": [
          {
            "type": "address",
            "name": "to"
          },
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Approve an address for a node"
      },
      {
        "name": "getApproved",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "ownerOf",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "resolver",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "ttl",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "recordExists",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "isApprovedForAll",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "operator"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "bool"
        },
        "desc": "Check if an operator is approved for all"
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the VnsRegistry smart contract.
 */
export type VnsRegistry = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_update(uint64)void' | 'post_update', {
      argsObj: {
        resolver: bigint | number
      }
      argsTuple: [resolver: bigint | number]
      returns: void
    }>
    & Record<'setRegistryResolver(uint64)void' | 'setRegistryResolver', {
      argsObj: {
        resolver: bigint | number
      }
      argsTuple: [resolver: bigint | number]
      returns: void
    }>
    & Record<'killApplication()void' | 'killApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'killNode(byte[32])void' | 'killNode', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: void
    }>
    & Record<'killOperator(address,address)void' | 'killOperator', {
      argsObj: {
        operator: string
        owner: string
      }
      argsTuple: [operator: string, owner: string]
      returns: void
    }>
    & Record<'deleteBox(byte[])void' | 'deleteBox', {
      argsObj: {
        key: Uint8Array
      }
      argsTuple: [key: Uint8Array]
      returns: void
    }>
    & Record<'setRecord(byte[32],address,uint64,uint64)void' | 'setRecord', {
      argsObj: {
        node: Uint8Array
        owner: string
        resolver: bigint | number
        ttl: bigint | number
      }
      argsTuple: [node: Uint8Array, owner: string, resolver: bigint | number, ttl: bigint | number]
      returns: void
    }>
    & Record<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void' | 'setSubnodeRecord', {
      argsObj: {
        node: Uint8Array
        label: Uint8Array
        owner: string
        resolver: bigint | number
        ttl: bigint | number
      }
      argsTuple: [node: Uint8Array, label: Uint8Array, owner: string, resolver: bigint | number, ttl: bigint | number]
      returns: void
    }>
    & Record<'setSubnodeOwner(byte[32],byte[32],address)byte[32]' | 'setSubnodeOwner', {
      argsObj: {
        node: Uint8Array
        label: Uint8Array
        owner: string
      }
      argsTuple: [node: Uint8Array, label: Uint8Array, owner: string]
      returns: Uint8Array
    }>
    & Record<'setResolver(byte[32],uint64)void' | 'setResolver', {
      argsObj: {
        node: Uint8Array
        resolver: bigint | number
      }
      argsTuple: [node: Uint8Array, resolver: bigint | number]
      returns: void
    }>
    & Record<'setOwner(byte[32],address)void' | 'setOwner', {
      argsObj: {
        node: Uint8Array
        owner: string
      }
      argsTuple: [node: Uint8Array, owner: string]
      returns: void
    }>
    & Record<'setTTL(byte[32],uint64)void' | 'setTTL', {
      argsObj: {
        node: Uint8Array
        ttl: bigint | number
      }
      argsTuple: [node: Uint8Array, ttl: bigint | number]
      returns: void
    }>
    & Record<'setApprovalForAll(address,bool)void' | 'setApprovalForAll', {
      argsObj: {
        operator: string
        approved: boolean
      }
      argsTuple: [operator: string, approved: boolean]
      returns: void
    }>
    & Record<'approve(address,byte[32])void' | 'approve', {
      argsObj: {
        to: string
        node: Uint8Array
      }
      argsTuple: [to: string, node: Uint8Array]
      returns: void
    }>
    & Record<'getApproved(byte[32])address' | 'getApproved', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: string
    }>
    & Record<'ownerOf(byte[32])address' | 'ownerOf', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: string
    }>
    & Record<'resolver(byte[32])uint64' | 'resolver', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: bigint
    }>
    & Record<'ttl(byte[32])uint64' | 'ttl', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: bigint
    }>
    & Record<'recordExists(byte[32])bool' | 'recordExists', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: boolean
    }>
    & Record<'isApprovedForAll(address,address)bool' | 'isApprovedForAll', {
      argsObj: {
        owner: string
        operator: string
      }
      argsTuple: [owner: string, operator: string]
      returns: boolean
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      contractVersion?: IntegerState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      owner?: BinaryState
      registryResolver?: IntegerState
      registryTtl?: IntegerState
      stakeable?: IntegerState
      updatable?: IntegerState
      upgrader?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VnsRegistrySig = keyof VnsRegistry['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VnsRegistrySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the VnsRegistry smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VnsRegistrySig> = VnsRegistry['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VnsRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VnsRegistrySig> = VnsRegistry['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VnsRegistryCreateCalls = (typeof VnsRegistryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VnsRegistryCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type VnsRegistryUpdateCalls = (typeof VnsRegistryCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type VnsRegistryUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type VnsRegistryDeleteCalls = (typeof VnsRegistryCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type VnsRegistryDeleteCallParams =
  | TypedCallParams<'killApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type VnsRegistryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VnsRegistryCreateCalls) => VnsRegistryCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: VnsRegistryUpdateCalls) => VnsRegistryUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: VnsRegistryDeleteCalls) => VnsRegistryDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VnsRegistryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VNSRegistry smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the VNSRegistry smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the VNSRegistry smart contract using the killApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'killApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_update(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_update(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.resolver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setRegistryResolver(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRegistryResolver(args: MethodArgs<'setRegistryResolver(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setRegistryResolver(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.resolver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the killNode(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static killNode(args: MethodArgs<'killNode(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'killNode(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the killOperator(address,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static killOperator(args: MethodArgs<'killOperator(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'killOperator(address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.operator, args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteBox(byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteBox(byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setRecord(byte[32],address,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setRecord(args: MethodArgs<'setRecord(byte[32],address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setRecord(byte[32],address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.owner, args.resolver, args.ttl],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void ABI method
   *
   * Set the record for a subnode
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSubnodeRecord(args: MethodArgs<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.label, args.owner, args.resolver, args.ttl],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setSubnodeOwner(byte[32],byte[32],address)byte[32] ABI method
   *
   * Set the owner of a subnode
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSubnodeOwner(args: MethodArgs<'setSubnodeOwner(byte[32],byte[32],address)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSubnodeOwner(byte[32],byte[32],address)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.label, args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setResolver(byte[32],uint64)void ABI method
   *
   * Set the resolver for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setResolver(args: MethodArgs<'setResolver(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setResolver(byte[32],uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.resolver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setOwner(byte[32],address)void ABI method
   *
   * Set the owner of a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setOwner(args: MethodArgs<'setOwner(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setOwner(byte[32],address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.owner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setTTL(byte[32],uint64)void ABI method
   *
   * Set the TTL for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setTtl(args: MethodArgs<'setTTL(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setTTL(byte[32],uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.ttl],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setApprovalForAll(address,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setApprovalForAll(args: MethodArgs<'setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setApprovalForAll(address,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.operator, args.approved],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve(address,byte[32])void ABI method
   *
   * Approve an address for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approve(args: MethodArgs<'approve(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve(address,byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getApproved(byte[32])address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getApproved(args: MethodArgs<'getApproved(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getApproved(byte[32])address' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ownerOf(byte[32])address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static ownerOf(args: MethodArgs<'ownerOf(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ownerOf(byte[32])address' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the resolver(byte[32])uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static resolver(args: MethodArgs<'resolver(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'resolver(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ttl(byte[32])uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static ttl(args: MethodArgs<'ttl(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ttl(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the recordExists(byte[32])bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static recordExists(args: MethodArgs<'recordExists(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'recordExists(byte[32])bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the isApprovedForAll(address,address)bool ABI method
   *
   * Check if an operator is approved for all
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static isApprovedForAll(args: MethodArgs<'isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'isApprovedForAll(address,address)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.operator],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VNSRegistry smart contract
 */
export class VnsRegistryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VnsRegistryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VnsRegistry['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VNSRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VnsRegistryDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VnsRegistryCallFactory.create)
    const updateArgs = params.updateCall?.(VnsRegistryCallFactory.update)
    const deleteArgs = params.deleteCall?.(VnsRegistryCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VNSRegistry smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the VNSRegistry smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the VNSRegistry smart contract using the killApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async killApplication(args: MethodArgs<'killApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'killApplication()void'>>(await $this.appClient.delete(VnsRegistryCallFactory.delete.killApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VNSRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.postUpdate(args, params))
  }

  /**
   * Calls the setRegistryResolver(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRegistryResolver(args: MethodArgs<'setRegistryResolver(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setRegistryResolver(args, params))
  }

  /**
   * Calls the killNode(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public killNode(args: MethodArgs<'killNode(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.killNode(args, params))
  }

  /**
   * Calls the killOperator(address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public killOperator(args: MethodArgs<'killOperator(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.killOperator(args, params))
  }

  /**
   * Calls the deleteBox(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.deleteBox(args, params))
  }

  /**
   * Calls the setRecord(byte[32],address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setRecord(args: MethodArgs<'setRecord(byte[32],address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setRecord(args, params))
  }

  /**
   * Calls the setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void ABI method.
   *
   * Set the record for a subnode
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSubnodeRecord(args: MethodArgs<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setSubnodeRecord(args, params))
  }

  /**
   * Calls the setSubnodeOwner(byte[32],byte[32],address)byte[32] ABI method.
   *
   * Set the owner of a subnode
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSubnodeOwner(args: MethodArgs<'setSubnodeOwner(byte[32],byte[32],address)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setSubnodeOwner(args, params))
  }

  /**
   * Calls the setResolver(byte[32],uint64)void ABI method.
   *
   * Set the resolver for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setResolver(args: MethodArgs<'setResolver(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setResolver(args, params))
  }

  /**
   * Calls the setOwner(byte[32],address)void ABI method.
   *
   * Set the owner of a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setOwner(args: MethodArgs<'setOwner(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setOwner(args, params))
  }

  /**
   * Calls the setTTL(byte[32],uint64)void ABI method.
   *
   * Set the TTL for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setTtl(args: MethodArgs<'setTTL(byte[32],uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setTtl(args, params))
  }

  /**
   * Calls the setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setApprovalForAll(args: MethodArgs<'setApprovalForAll(address,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setApprovalForAll(args, params))
  }

  /**
   * Calls the approve(address,byte[32])void ABI method.
   *
   * Approve an address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approve(args: MethodArgs<'approve(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.approve(args, params))
  }

  /**
   * Calls the getApproved(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getApproved(args: MethodArgs<'getApproved(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.getApproved(args, params))
  }

  /**
   * Calls the ownerOf(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public ownerOf(args: MethodArgs<'ownerOf(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.ownerOf(args, params))
  }

  /**
   * Calls the resolver(byte[32])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public resolver(args: MethodArgs<'resolver(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.resolver(args, params))
  }

  /**
   * Calls the ttl(byte[32])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public ttl(args: MethodArgs<'ttl(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.ttl(args, params))
  }

  /**
   * Calls the recordExists(byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public recordExists(args: MethodArgs<'recordExists(byte[32])bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.recordExists(args, params))
  }

  /**
   * Calls the isApprovedForAll(address,address)bool ABI method.
   *
   * Check if an operator is approved for all
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public isApprovedForAll(args: MethodArgs<'isApprovedForAll(address,address)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.isApprovedForAll(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.participate(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsRegistryCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<VnsRegistry['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get contractVersion() {
        return VnsRegistryClient.getIntegerState(state, 'contract_version')
      },
      get delegate() {
        return VnsRegistryClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return VnsRegistryClient.getIntegerState(state, 'deployment_version')
      },
      get owner() {
        return VnsRegistryClient.getBinaryState(state, 'owner')
      },
      get registryResolver() {
        return VnsRegistryClient.getIntegerState(state, 'registry_resolver')
      },
      get registryTtl() {
        return VnsRegistryClient.getIntegerState(state, 'registry_ttl')
      },
      get stakeable() {
        return VnsRegistryClient.getIntegerState(state, 'stakeable')
      },
      get updatable() {
        return VnsRegistryClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return VnsRegistryClient.getBinaryState(state, 'upgrader')
      },
    }
  }

  public compose(): VnsRegistryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRegistryResolver(args: MethodArgs<'setRegistryResolver(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRegistryResolver(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      killNode(args: MethodArgs<'killNode(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.killNode(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      killOperator(args: MethodArgs<'killOperator(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.killOperator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setRecord(args: MethodArgs<'setRecord(byte[32],address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setRecord(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setSubnodeRecord(args: MethodArgs<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSubnodeRecord(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setSubnodeOwner(args: MethodArgs<'setSubnodeOwner(byte[32],byte[32],address)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSubnodeOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setResolver(args: MethodArgs<'setResolver(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setResolver(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setOwner(args: MethodArgs<'setOwner(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setTtl(args: MethodArgs<'setTTL(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setTtl(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setApprovalForAll(args: MethodArgs<'setApprovalForAll(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setApprovalForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approve(args: MethodArgs<'approve(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getApproved(args: MethodArgs<'getApproved(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getApproved(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      ownerOf(args: MethodArgs<'ownerOf(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.ownerOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      resolver(args: MethodArgs<'resolver(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.resolver(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      ttl(args: MethodArgs<'ttl(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.ttl(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      recordExists(args: MethodArgs<'recordExists(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.recordExists(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      isApprovedForAll(args: MethodArgs<'isApprovedForAll(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.isApprovedForAll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.killApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VnsRegistryComposer
  }
}
export type VnsRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'post_update(uint64)void'>]>

  /**
   * Calls the setRegistryResolver(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRegistryResolver(args: MethodArgs<'setRegistryResolver(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setRegistryResolver(uint64)void'>]>

  /**
   * Calls the killNode(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  killNode(args: MethodArgs<'killNode(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'killNode(byte[32])void'>]>

  /**
   * Calls the killOperator(address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  killOperator(args: MethodArgs<'killOperator(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'killOperator(address,address)void'>]>

  /**
   * Calls the deleteBox(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteBox(args: MethodArgs<'deleteBox(byte[])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'deleteBox(byte[])void'>]>

  /**
   * Calls the setRecord(byte[32],address,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setRecord(args: MethodArgs<'setRecord(byte[32],address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setRecord(byte[32],address,uint64,uint64)void'>]>

  /**
   * Calls the setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void ABI method.
   *
   * Set the record for a subnode
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSubnodeRecord(args: MethodArgs<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void'>]>

  /**
   * Calls the setSubnodeOwner(byte[32],byte[32],address)byte[32] ABI method.
   *
   * Set the owner of a subnode
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSubnodeOwner(args: MethodArgs<'setSubnodeOwner(byte[32],byte[32],address)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setSubnodeOwner(byte[32],byte[32],address)byte[32]'>]>

  /**
   * Calls the setResolver(byte[32],uint64)void ABI method.
   *
   * Set the resolver for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setResolver(args: MethodArgs<'setResolver(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setResolver(byte[32],uint64)void'>]>

  /**
   * Calls the setOwner(byte[32],address)void ABI method.
   *
   * Set the owner of a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setOwner(args: MethodArgs<'setOwner(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setOwner(byte[32],address)void'>]>

  /**
   * Calls the setTTL(byte[32],uint64)void ABI method.
   *
   * Set the TTL for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTtl(args: MethodArgs<'setTTL(byte[32],uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setTTL(byte[32],uint64)void'>]>

  /**
   * Calls the setApprovalForAll(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setApprovalForAll(args: MethodArgs<'setApprovalForAll(address,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'setApprovalForAll(address,bool)void'>]>

  /**
   * Calls the approve(address,byte[32])void ABI method.
   *
   * Approve an address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approve(args: MethodArgs<'approve(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'approve(address,byte[32])void'>]>

  /**
   * Calls the getApproved(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getApproved(args: MethodArgs<'getApproved(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'getApproved(byte[32])address'>]>

  /**
   * Calls the ownerOf(byte[32])address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ownerOf(args: MethodArgs<'ownerOf(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'ownerOf(byte[32])address'>]>

  /**
   * Calls the resolver(byte[32])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolver(args: MethodArgs<'resolver(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'resolver(byte[32])uint64'>]>

  /**
   * Calls the ttl(byte[32])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ttl(args: MethodArgs<'ttl(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'ttl(byte[32])uint64'>]>

  /**
   * Calls the recordExists(byte[32])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordExists(args: MethodArgs<'recordExists(byte[32])bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'recordExists(byte[32])bool'>]>

  /**
   * Calls the isApprovedForAll(address,address)bool ABI method.
   *
   * Check if an operator is approved for all
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isApprovedForAll(args: MethodArgs<'isApprovedForAll(address,address)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'isApprovedForAll(address,address)bool'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the VNSRegistry smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VNSRegistry smart contract using the killApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    killApplication(args: MethodArgs<'killApplication()void'>, params?: AppClientComposeCallCoreParams): VnsRegistryComposer<[...TReturns, MethodReturn<'killApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VNSRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VnsRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VnsRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<VnsRegistryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<VnsRegistryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type VnsRegistryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type VnsRegistryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
